// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RtcSdp.proto

#include "RtcSdp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Crypto_Params_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rtp_Extension_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Socket_Address_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ssl_Fignerpint_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ssrc_Group_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Rid_Description_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Simulcast_Description_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Content_Group_RtcSdp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Media_Transport_Setting_RtcSdp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Content_Info_RtcSdp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Transport_Description_RtcSdp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Stream_Params_RtcSdp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdp_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Media_Content_Description_RtcSdp_2eproto;
class Transport_DescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Transport_Description> _instance;
} _Transport_Description_default_instance_;
class Stream_ParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stream_Params> _instance;
} _Stream_Params_default_instance_;
class Media_Content_DescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Media_Content_Description> _instance;
} _Media_Content_Description_default_instance_;
class Content_InfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Content_Info> _instance;
} _Content_Info_default_instance_;
class Content_GroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Content_Group> _instance;
} _Content_Group_default_instance_;
class Media_Transport_SettingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Media_Transport_Setting> _instance;
} _Media_Transport_Setting_default_instance_;
class Session_DescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Session_Description> _instance;
} _Session_Description_default_instance_;
static void InitDefaultsTransport_Description_RtcSdp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Transport_Description_default_instance_;
    new (ptr) ::Transport_Description();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Transport_Description::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Transport_Description_RtcSdp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTransport_Description_RtcSdp_2eproto}, {
      &scc_info_Ssl_Fignerpint_RtcSdpDefine_2eproto.base,}};

static void InitDefaultsStream_Params_RtcSdp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Stream_Params_default_instance_;
    new (ptr) ::Stream_Params();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Stream_Params::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Stream_Params_RtcSdp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsStream_Params_RtcSdp_2eproto}, {
      &scc_info_Ssrc_Group_RtcSdpDefine_2eproto.base,
      &scc_info_Rid_Description_RtcSdpDefine_2eproto.base,}};

static void InitDefaultsMedia_Content_Description_RtcSdp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Media_Content_Description_default_instance_;
    new (ptr) ::Media_Content_Description();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Media_Content_Description::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_Media_Content_Description_RtcSdp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsMedia_Content_Description_RtcSdp_2eproto}, {
      &scc_info_Crypto_Params_RtcSdpDefine_2eproto.base,
      &scc_info_Rtp_Extension_RtcSdpDefine_2eproto.base,
      &scc_info_Stream_Params_RtcSdp_2eproto.base,
      &scc_info_Socket_Address_RtcSdpDefine_2eproto.base,
      &scc_info_Simulcast_Description_RtcSdpDefine_2eproto.base,}};

static void InitDefaultsContent_Info_RtcSdp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Content_Info_default_instance_;
    new (ptr) ::Content_Info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Content_Info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Content_Info_RtcSdp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsContent_Info_RtcSdp_2eproto}, {
      &scc_info_Media_Content_Description_RtcSdp_2eproto.base,}};

static void InitDefaultsContent_Group_RtcSdp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Content_Group_default_instance_;
    new (ptr) ::Content_Group();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Content_Group::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Content_Group_RtcSdp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsContent_Group_RtcSdp_2eproto}, {}};

static void InitDefaultsMedia_Transport_Setting_RtcSdp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Media_Transport_Setting_default_instance_;
    new (ptr) ::Media_Transport_Setting();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Media_Transport_Setting::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Media_Transport_Setting_RtcSdp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMedia_Transport_Setting_RtcSdp_2eproto}, {}};

static void InitDefaultsSession_Description_RtcSdp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Session_Description_default_instance_;
    new (ptr) ::Session_Description();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Session_Description::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Session_Description_RtcSdp_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsSession_Description_RtcSdp_2eproto}, {
      &scc_info_Content_Info_RtcSdp_2eproto.base,
      &scc_info_Transport_Description_RtcSdp_2eproto.base,
      &scc_info_Content_Group_RtcSdp_2eproto.base,
      &scc_info_Media_Transport_Setting_RtcSdp_2eproto.base,}};


// ===================================================================

void Transport_Description::InitAsDefaultInstance() {
  ::_Transport_Description_default_instance_._instance.get_mutable()->identity_fingerprint_ = const_cast< ::Ssl_Fignerpint*>(
      ::Ssl_Fignerpint::internal_default_instance());
}
class Transport_Description::HasBitSetters {
 public:
  static void set_has_content_name(Transport_Description* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ice_ufrag(Transport_Description* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ice_pwd(Transport_Description* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ice_mode(Transport_Description* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_connection_role(Transport_Description* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::Ssl_Fignerpint& identity_fingerprint(const Transport_Description* msg);
  static void set_has_identity_fingerprint(Transport_Description* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::Ssl_Fignerpint&
Transport_Description::HasBitSetters::identity_fingerprint(const Transport_Description* msg) {
  return *msg->identity_fingerprint_;
}
void Transport_Description::clear_identity_fingerprint() {
  if (identity_fingerprint_ != nullptr) identity_fingerprint_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_Description::kContentNameFieldNumber;
const int Transport_Description::kTransportOptionsFieldNumber;
const int Transport_Description::kIceUfragFieldNumber;
const int Transport_Description::kIcePwdFieldNumber;
const int Transport_Description::kIceModeFieldNumber;
const int Transport_Description::kConnectionRoleFieldNumber;
const int Transport_Description::kIdentityFingerprintFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_Description::Transport_Description()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Transport_Description)
}
Transport_Description::Transport_Description(const Transport_Description& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      transport_options_(from.transport_options_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content_name()) {
    content_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_name_);
  }
  ice_ufrag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ice_ufrag()) {
    ice_ufrag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_ufrag_);
  }
  ice_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ice_pwd()) {
    ice_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_pwd_);
  }
  if (from.has_identity_fingerprint()) {
    identity_fingerprint_ = new ::Ssl_Fignerpint(*from.identity_fingerprint_);
  } else {
    identity_fingerprint_ = nullptr;
  }
  ::memcpy(&ice_mode_, &from.ice_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&connection_role_) -
    reinterpret_cast<char*>(&ice_mode_)) + sizeof(connection_role_));
  // @@protoc_insertion_point(copy_constructor:Transport_Description)
}

void Transport_Description::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Transport_Description_RtcSdp_2eproto.base);
  content_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ice_ufrag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ice_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&identity_fingerprint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connection_role_) -
      reinterpret_cast<char*>(&identity_fingerprint_)) + sizeof(connection_role_));
}

Transport_Description::~Transport_Description() {
  // @@protoc_insertion_point(destructor:Transport_Description)
  SharedDtor();
}

void Transport_Description::SharedDtor() {
  content_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ice_ufrag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ice_pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identity_fingerprint_;
}

void Transport_Description::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transport_Description& Transport_Description::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Transport_Description_RtcSdp_2eproto.base);
  return *internal_default_instance();
}


void Transport_Description::Clear() {
// @@protoc_insertion_point(message_clear_start:Transport_Description)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transport_options_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      content_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ice_ufrag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ice_pwd_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(identity_fingerprint_ != nullptr);
      identity_fingerprint_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&ice_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connection_role_) -
        reinterpret_cast<char*>(&ice_mode_)) + sizeof(connection_role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transport_Description::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Transport_Description*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string content_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_content_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string transport_options = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_transport_options();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional string ice_ufrag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ice_ufrag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string ice_pwd = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ice_pwd();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .Ice_Mode ice_mode = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::Ice_Mode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_ice_mode(static_cast<::Ice_Mode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Connection_Role connection_role = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::Connection_Role_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_connection_role(static_cast<::Connection_Role>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Ssl_Fignerpint identity_fingerprint = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Ssl_Fignerpint::_InternalParse;
        object = msg->mutable_identity_fingerprint();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transport_Description::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Transport_Description)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string transport_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_transport_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ice_ufrag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_ufrag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ice_pwd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_pwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Ice_Mode ice_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Ice_Mode_IsValid(value)) {
            set_ice_mode(static_cast< ::Ice_Mode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Connection_Role connection_role = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Connection_Role_IsValid(value)) {
            set_connection_role(static_cast< ::Connection_Role >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Ssl_Fignerpint identity_fingerprint = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_identity_fingerprint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Transport_Description)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Transport_Description)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transport_Description::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Transport_Description)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string content_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content_name(), output);
  }

  // repeated string transport_options = 2;
  for (int i = 0, n = this->transport_options_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->transport_options(i), output);
  }

  // optional string ice_ufrag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ice_ufrag(), output);
  }

  // optional string ice_pwd = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ice_pwd(), output);
  }

  // optional .Ice_Mode ice_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ice_mode(), output);
  }

  // optional .Connection_Role connection_role = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->connection_role(), output);
  }

  // optional .Ssl_Fignerpint identity_fingerprint = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, HasBitSetters::identity_fingerprint(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Transport_Description)
}

size_t Transport_Description::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Transport_Description)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string transport_options = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->transport_options_size());
  for (int i = 0, n = this->transport_options_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->transport_options(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string content_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_name());
    }

    // optional string ice_ufrag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ice_ufrag());
    }

    // optional string ice_pwd = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ice_pwd());
    }

    // optional .Ssl_Fignerpint identity_fingerprint = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identity_fingerprint_);
    }

    // optional .Ice_Mode ice_mode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ice_mode());
    }

    // optional .Connection_Role connection_role = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->connection_role());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transport_Description::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Transport_Description*>(&from));
}

void Transport_Description::MergeFrom(const Transport_Description& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Transport_Description)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transport_options_.MergeFrom(from.transport_options_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      content_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ice_ufrag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_ufrag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      ice_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_pwd_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_identity_fingerprint()->::Ssl_Fignerpint::MergeFrom(from.identity_fingerprint());
    }
    if (cached_has_bits & 0x00000010u) {
      ice_mode_ = from.ice_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      connection_role_ = from.connection_role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transport_Description::CopyFrom(const Transport_Description& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Transport_Description)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_Description::IsInitialized() const {
  return true;
}

void Transport_Description::Swap(Transport_Description* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_Description::InternalSwap(Transport_Description* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transport_options_.InternalSwap(CastToBase(&other->transport_options_));
  content_name_.Swap(&other->content_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ice_ufrag_.Swap(&other->ice_ufrag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ice_pwd_.Swap(&other->ice_pwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identity_fingerprint_, other->identity_fingerprint_);
  swap(ice_mode_, other->ice_mode_);
  swap(connection_role_, other->connection_role_);
}

::std::string Transport_Description::GetTypeName() const {
  return "Transport_Description";
}


// ===================================================================

void Stream_Params::InitAsDefaultInstance() {
}
class Stream_Params::HasBitSetters {
 public:
  static void set_has_groupid(Stream_Params* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_id(Stream_Params* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cname(Stream_Params* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

void Stream_Params::clear_ssrc_groups() {
  ssrc_groups_.Clear();
}
void Stream_Params::clear_rids() {
  rids_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream_Params::kGroupidFieldNumber;
const int Stream_Params::kIdFieldNumber;
const int Stream_Params::kSsrcsFieldNumber;
const int Stream_Params::kSsrcGroupsFieldNumber;
const int Stream_Params::kCnameFieldNumber;
const int Stream_Params::kStreamIdsFieldNumber;
const int Stream_Params::kRidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream_Params::Stream_Params()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Stream_Params)
}
Stream_Params::Stream_Params(const Stream_Params& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ssrcs_(from.ssrcs_),
      ssrc_groups_(from.ssrc_groups_),
      stream_ids_(from.stream_ids_),
      rids_(from.rids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupid()) {
    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  cname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cname()) {
    cname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cname_);
  }
  // @@protoc_insertion_point(copy_constructor:Stream_Params)
}

void Stream_Params::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Stream_Params_RtcSdp_2eproto.base);
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Stream_Params::~Stream_Params() {
  // @@protoc_insertion_point(destructor:Stream_Params)
  SharedDtor();
}

void Stream_Params::SharedDtor() {
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stream_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stream_Params& Stream_Params::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Stream_Params_RtcSdp_2eproto.base);
  return *internal_default_instance();
}


void Stream_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:Stream_Params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssrcs_.Clear();
  ssrc_groups_.Clear();
  stream_ids_.Clear();
  rids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      groupid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      cname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Stream_Params::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Stream_Params*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string groupid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_groupid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 ssrcs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_ssrcs(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_ssrcs();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .Ssrc_Group ssrc_groups = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Ssrc_Group::_InternalParse;
          object = msg->add_ssrc_groups();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // optional string cname = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string stream_ids = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_stream_ids();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .Rid_Description rids = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Rid_Description::_InternalParse;
          object = msg->add_rids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Stream_Params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Stream_Params)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string groupid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ssrcs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_ssrcs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ssrcs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Ssrc_Group ssrc_groups = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ssrc_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cname = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string stream_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stream_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Rid_Description rids = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Stream_Params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Stream_Params)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Stream_Params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Stream_Params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string groupid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupid(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // repeated uint32 ssrcs = 3;
  for (int i = 0, n = this->ssrcs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->ssrcs(i), output);
  }

  // repeated .Ssrc_Group ssrc_groups = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ssrc_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->ssrc_groups(static_cast<int>(i)),
      output);
  }

  // optional string cname = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cname(), output);
  }

  // repeated string stream_ids = 6;
  for (int i = 0, n = this->stream_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->stream_ids(i), output);
  }

  // repeated .Rid_Description rids = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7,
      this->rids(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Stream_Params)
}

size_t Stream_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Stream_Params)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ssrcs = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ssrcs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ssrcs_size());
    total_size += data_size;
  }

  // repeated .Ssrc_Group ssrc_groups = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ssrc_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ssrc_groups(static_cast<int>(i)));
    }
  }

  // repeated string stream_ids = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stream_ids_size());
  for (int i = 0, n = this->stream_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stream_ids(i));
  }

  // repeated .Rid_Description rids = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->rids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rids(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string groupid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }

    // optional string id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string cname = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cname());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream_Params::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Stream_Params*>(&from));
}

void Stream_Params::MergeFrom(const Stream_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Stream_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ssrcs_.MergeFrom(from.ssrcs_);
  ssrc_groups_.MergeFrom(from.ssrc_groups_);
  stream_ids_.MergeFrom(from.stream_ids_);
  rids_.MergeFrom(from.rids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      cname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cname_);
    }
  }
}

void Stream_Params::CopyFrom(const Stream_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Stream_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Params::IsInitialized() const {
  return true;
}

void Stream_Params::Swap(Stream_Params* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream_Params::InternalSwap(Stream_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ssrcs_.InternalSwap(&other->ssrcs_);
  CastToBase(&ssrc_groups_)->InternalSwap(CastToBase(&other->ssrc_groups_));
  stream_ids_.InternalSwap(CastToBase(&other->stream_ids_));
  CastToBase(&rids_)->InternalSwap(CastToBase(&other->rids_));
  groupid_.Swap(&other->groupid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cname_.Swap(&other->cname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string Stream_Params::GetTypeName() const {
  return "Stream_Params";
}


// ===================================================================

void Media_Content_Description::InitAsDefaultInstance() {
  ::_Media_Content_Description_default_instance_._instance.get_mutable()->connection_address_ = const_cast< ::Socket_Address*>(
      ::Socket_Address::internal_default_instance());
  ::_Media_Content_Description_default_instance_._instance.get_mutable()->simulcast_ = const_cast< ::Simulcast_Description*>(
      ::Simulcast_Description::internal_default_instance());
}
class Media_Content_Description::HasBitSetters {
 public:
  static void set_has_rtcp_mux(Media_Content_Description* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_rtcp_reduced_size(Media_Content_Description* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_bandwidth(Media_Content_Description* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_protocol(Media_Content_Description* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rtp_header_extensions_set(Media_Content_Description* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_conference_mode(Media_Content_Description* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_direction(Media_Content_Description* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::Socket_Address& connection_address(const Media_Content_Description* msg);
  static void set_has_connection_address(Media_Content_Description* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_extmap_allow_mixed_enum(Media_Content_Description* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::Simulcast_Description& simulcast(const Media_Content_Description* msg);
  static void set_has_simulcast(Media_Content_Description* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::Socket_Address&
Media_Content_Description::HasBitSetters::connection_address(const Media_Content_Description* msg) {
  return *msg->connection_address_;
}
const ::Simulcast_Description&
Media_Content_Description::HasBitSetters::simulcast(const Media_Content_Description* msg) {
  return *msg->simulcast_;
}
void Media_Content_Description::clear_cryptos() {
  cryptos_.Clear();
}
void Media_Content_Description::clear_rtp_header_extensions() {
  rtp_header_extensions_.Clear();
}
void Media_Content_Description::clear_connection_address() {
  if (connection_address_ != nullptr) connection_address_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Media_Content_Description::clear_simulcast() {
  if (simulcast_ != nullptr) simulcast_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Media_Content_Description::kRtcpMuxFieldNumber;
const int Media_Content_Description::kRtcpReducedSizeFieldNumber;
const int Media_Content_Description::kBandwidthFieldNumber;
const int Media_Content_Description::kProtocolFieldNumber;
const int Media_Content_Description::kCryptosFieldNumber;
const int Media_Content_Description::kRtpHeaderExtensionsFieldNumber;
const int Media_Content_Description::kRtpHeaderExtensionsSetFieldNumber;
const int Media_Content_Description::kSendStreamsFieldNumber;
const int Media_Content_Description::kConferenceModeFieldNumber;
const int Media_Content_Description::kDirectionFieldNumber;
const int Media_Content_Description::kConnectionAddressFieldNumber;
const int Media_Content_Description::kExtmapAllowMixedEnumFieldNumber;
const int Media_Content_Description::kSimulcastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Media_Content_Description::Media_Content_Description()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Media_Content_Description)
}
Media_Content_Description::Media_Content_Description(const Media_Content_Description& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cryptos_(from.cryptos_),
      rtp_header_extensions_(from.rtp_header_extensions_),
      send_streams_(from.send_streams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocol()) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.has_connection_address()) {
    connection_address_ = new ::Socket_Address(*from.connection_address_);
  } else {
    connection_address_ = nullptr;
  }
  if (from.has_simulcast()) {
    simulcast_ = new ::Simulcast_Description(*from.simulcast_);
  } else {
    simulcast_ = nullptr;
  }
  ::memcpy(&bandwidth_, &from.bandwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&extmap_allow_mixed_enum_) -
    reinterpret_cast<char*>(&bandwidth_)) + sizeof(extmap_allow_mixed_enum_));
  // @@protoc_insertion_point(copy_constructor:Media_Content_Description)
}

void Media_Content_Description::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Media_Content_Description_RtcSdp_2eproto.base);
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connection_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extmap_allow_mixed_enum_) -
      reinterpret_cast<char*>(&connection_address_)) + sizeof(extmap_allow_mixed_enum_));
}

Media_Content_Description::~Media_Content_Description() {
  // @@protoc_insertion_point(destructor:Media_Content_Description)
  SharedDtor();
}

void Media_Content_Description::SharedDtor() {
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete connection_address_;
  if (this != internal_default_instance()) delete simulcast_;
}

void Media_Content_Description::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Media_Content_Description& Media_Content_Description::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Media_Content_Description_RtcSdp_2eproto.base);
  return *internal_default_instance();
}


void Media_Content_Description::Clear() {
// @@protoc_insertion_point(message_clear_start:Media_Content_Description)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cryptos_.Clear();
  rtp_header_extensions_.Clear();
  send_streams_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      protocol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(connection_address_ != nullptr);
      connection_address_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(simulcast_ != nullptr);
      simulcast_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&bandwidth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&conference_mode_) -
        reinterpret_cast<char*>(&bandwidth_)) + sizeof(conference_mode_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extmap_allow_mixed_enum_) -
        reinterpret_cast<char*>(&direction_)) + sizeof(extmap_allow_mixed_enum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Media_Content_Description::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Media_Content_Description*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool rtcp_mux = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_rtcp_mux(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool rtcp_reduced_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_rtcp_reduced_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 bandwidth = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_bandwidth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string protocol = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_protocol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .Crypto_Params cryptos = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Crypto_Params::_InternalParse;
          object = msg->add_cryptos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .Rtp_Extension rtp_header_extensions = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Rtp_Extension::_InternalParse;
          object = msg->add_rtp_header_extensions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // optional bool rtp_header_extensions_set = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_rtp_header_extensions_set(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .Stream_Params send_streams = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Stream_Params::_InternalParse;
          object = msg->add_send_streams();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // optional bool conference_mode = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_conference_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Rtp_Transceiver_Direction direction = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::Rtp_Transceiver_Direction_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(10, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_direction(static_cast<::Rtp_Transceiver_Direction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Socket_Address connection_address = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Socket_Address::_InternalParse;
        object = msg->mutable_connection_address();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .Extmap_Allow_Mixed extmap_allow_mixed_enum = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::Extmap_Allow_Mixed_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(12, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_extmap_allow_mixed_enum(static_cast<::Extmap_Allow_Mixed>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Simulcast_Description simulcast = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Simulcast_Description::_InternalParse;
        object = msg->mutable_simulcast();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Media_Content_Description::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Media_Content_Description)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool rtcp_mux = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_rtcp_mux(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rtcp_mux_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rtcp_reduced_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_rtcp_reduced_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rtcp_reduced_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bandwidth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_bandwidth(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string protocol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Crypto_Params cryptos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cryptos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Rtp_Extension rtp_header_extensions = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rtp_header_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rtp_header_extensions_set = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_rtp_header_extensions_set(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rtp_header_extensions_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Stream_Params send_streams = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_send_streams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool conference_mode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_conference_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &conference_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Rtp_Transceiver_Direction direction = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Rtp_Transceiver_Direction_IsValid(value)) {
            set_direction(static_cast< ::Rtp_Transceiver_Direction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Socket_Address connection_address = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connection_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Extmap_Allow_Mixed extmap_allow_mixed_enum = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Extmap_Allow_Mixed_IsValid(value)) {
            set_extmap_allow_mixed_enum(static_cast< ::Extmap_Allow_Mixed >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Simulcast_Description simulcast = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_simulcast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Media_Content_Description)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Media_Content_Description)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Media_Content_Description::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Media_Content_Description)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool rtcp_mux = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rtcp_mux(), output);
  }

  // optional bool rtcp_reduced_size = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rtcp_reduced_size(), output);
  }

  // optional int32 bandwidth = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bandwidth(), output);
  }

  // optional string protocol = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->protocol(), output);
  }

  // repeated .Crypto_Params cryptos = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cryptos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->cryptos(static_cast<int>(i)),
      output);
  }

  // repeated .Rtp_Extension rtp_header_extensions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rtp_header_extensions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6,
      this->rtp_header_extensions(static_cast<int>(i)),
      output);
  }

  // optional bool rtp_header_extensions_set = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->rtp_header_extensions_set(), output);
  }

  // repeated .Stream_Params send_streams = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->send_streams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8,
      this->send_streams(static_cast<int>(i)),
      output);
  }

  // optional bool conference_mode = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->conference_mode(), output);
  }

  // optional .Rtp_Transceiver_Direction direction = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->direction(), output);
  }

  // optional .Socket_Address connection_address = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, HasBitSetters::connection_address(this), output);
  }

  // optional .Extmap_Allow_Mixed extmap_allow_mixed_enum = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->extmap_allow_mixed_enum(), output);
  }

  // optional .Simulcast_Description simulcast = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, HasBitSetters::simulcast(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Media_Content_Description)
}

size_t Media_Content_Description::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Media_Content_Description)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Crypto_Params cryptos = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->cryptos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cryptos(static_cast<int>(i)));
    }
  }

  // repeated .Rtp_Extension rtp_header_extensions = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->rtp_header_extensions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rtp_header_extensions(static_cast<int>(i)));
    }
  }

  // repeated .Stream_Params send_streams = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->send_streams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->send_streams(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string protocol = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

    // optional .Socket_Address connection_address = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *connection_address_);
    }

    // optional .Simulcast_Description simulcast = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *simulcast_);
    }

    // optional int32 bandwidth = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bandwidth());
    }

    // optional bool rtcp_mux = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool rtcp_reduced_size = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool rtp_header_extensions_set = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool conference_mode = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .Rtp_Transceiver_Direction direction = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional .Extmap_Allow_Mixed extmap_allow_mixed_enum = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->extmap_allow_mixed_enum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Media_Content_Description::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Media_Content_Description*>(&from));
}

void Media_Content_Description::MergeFrom(const Media_Content_Description& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Media_Content_Description)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cryptos_.MergeFrom(from.cryptos_);
  rtp_header_extensions_.MergeFrom(from.rtp_header_extensions_);
  send_streams_.MergeFrom(from.send_streams_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_connection_address()->::Socket_Address::MergeFrom(from.connection_address());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_simulcast()->::Simulcast_Description::MergeFrom(from.simulcast());
    }
    if (cached_has_bits & 0x00000008u) {
      bandwidth_ = from.bandwidth_;
    }
    if (cached_has_bits & 0x00000010u) {
      rtcp_mux_ = from.rtcp_mux_;
    }
    if (cached_has_bits & 0x00000020u) {
      rtcp_reduced_size_ = from.rtcp_reduced_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      rtp_header_extensions_set_ = from.rtp_header_extensions_set_;
    }
    if (cached_has_bits & 0x00000080u) {
      conference_mode_ = from.conference_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      extmap_allow_mixed_enum_ = from.extmap_allow_mixed_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Media_Content_Description::CopyFrom(const Media_Content_Description& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Media_Content_Description)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media_Content_Description::IsInitialized() const {
  return true;
}

void Media_Content_Description::Swap(Media_Content_Description* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Media_Content_Description::InternalSwap(Media_Content_Description* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cryptos_)->InternalSwap(CastToBase(&other->cryptos_));
  CastToBase(&rtp_header_extensions_)->InternalSwap(CastToBase(&other->rtp_header_extensions_));
  CastToBase(&send_streams_)->InternalSwap(CastToBase(&other->send_streams_));
  protocol_.Swap(&other->protocol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(connection_address_, other->connection_address_);
  swap(simulcast_, other->simulcast_);
  swap(bandwidth_, other->bandwidth_);
  swap(rtcp_mux_, other->rtcp_mux_);
  swap(rtcp_reduced_size_, other->rtcp_reduced_size_);
  swap(rtp_header_extensions_set_, other->rtp_header_extensions_set_);
  swap(conference_mode_, other->conference_mode_);
  swap(direction_, other->direction_);
  swap(extmap_allow_mixed_enum_, other->extmap_allow_mixed_enum_);
}

::std::string Media_Content_Description::GetTypeName() const {
  return "Media_Content_Description";
}


// ===================================================================

void Content_Info::InitAsDefaultInstance() {
  ::_Content_Info_default_instance_._instance.get_mutable()->description_ = const_cast< ::Media_Content_Description*>(
      ::Media_Content_Description::internal_default_instance());
}
class Content_Info::HasBitSetters {
 public:
  static void set_has_name(Content_Info* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_type(Content_Info* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_rejected(Content_Info* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_bundle_only(Content_Info* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::Media_Content_Description& description(const Content_Info* msg);
  static void set_has_description(Content_Info* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::Media_Content_Description&
Content_Info::HasBitSetters::description(const Content_Info* msg) {
  return *msg->description_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Content_Info::kNameFieldNumber;
const int Content_Info::kTypeFieldNumber;
const int Content_Info::kRejectedFieldNumber;
const int Content_Info::kBundleOnlyFieldNumber;
const int Content_Info::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Content_Info::Content_Info()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Content_Info)
}
Content_Info::Content_Info(const Content_Info& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_description()) {
    description_ = new ::Media_Content_Description(*from.description_);
  } else {
    description_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&bundle_only_) -
    reinterpret_cast<char*>(&type_)) + sizeof(bundle_only_));
  // @@protoc_insertion_point(copy_constructor:Content_Info)
}

void Content_Info::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Content_Info_RtcSdp_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&description_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bundle_only_) -
      reinterpret_cast<char*>(&description_)) + sizeof(bundle_only_));
}

Content_Info::~Content_Info() {
  // @@protoc_insertion_point(destructor:Content_Info)
  SharedDtor();
}

void Content_Info::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete description_;
}

void Content_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Content_Info& Content_Info::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Content_Info_RtcSdp_2eproto.base);
  return *internal_default_instance();
}


void Content_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:Content_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(description_ != nullptr);
      description_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bundle_only_) -
        reinterpret_cast<char*>(&type_)) + sizeof(bundle_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Content_Info::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Content_Info*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .Media_Protocol_Type type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::Media_Protocol_Type_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::Media_Protocol_Type>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool rejected = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_rejected(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool bundle_only = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bundle_only(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Media_Content_Description description = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Media_Content_Description::_InternalParse;
        object = msg->mutable_description();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Content_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Content_Info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Media_Protocol_Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Media_Protocol_Type_IsValid(value)) {
            set_type(static_cast< ::Media_Protocol_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rejected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_rejected(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rejected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool bundle_only = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_bundle_only(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bundle_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Media_Content_Description description = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Content_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Content_Info)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Content_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Content_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .Media_Protocol_Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool rejected = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rejected(), output);
  }

  // optional bool bundle_only = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bundle_only(), output);
  }

  // optional .Media_Content_Description description = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, HasBitSetters::description(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Content_Info)
}

size_t Content_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Content_Info)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Media_Content_Description description = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *description_);
    }

    // optional .Media_Protocol_Type type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool rejected = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool bundle_only = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Content_Info::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Content_Info*>(&from));
}

void Content_Info::MergeFrom(const Content_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Content_Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_description()->::Media_Content_Description::MergeFrom(from.description());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rejected_ = from.rejected_;
    }
    if (cached_has_bits & 0x00000010u) {
      bundle_only_ = from.bundle_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Content_Info::CopyFrom(const Content_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Content_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content_Info::IsInitialized() const {
  return true;
}

void Content_Info::Swap(Content_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Content_Info::InternalSwap(Content_Info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(description_, other->description_);
  swap(type_, other->type_);
  swap(rejected_, other->rejected_);
  swap(bundle_only_, other->bundle_only_);
}

::std::string Content_Info::GetTypeName() const {
  return "Content_Info";
}


// ===================================================================

void Content_Group::InitAsDefaultInstance() {
}
class Content_Group::HasBitSetters {
 public:
  static void set_has_semantics(Content_Group* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Content_Group::kSemanticsFieldNumber;
const int Content_Group::kContentNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Content_Group::Content_Group()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Content_Group)
}
Content_Group::Content_Group(const Content_Group& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      content_names_(from.content_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  semantics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_semantics()) {
    semantics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.semantics_);
  }
  // @@protoc_insertion_point(copy_constructor:Content_Group)
}

void Content_Group::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Content_Group_RtcSdp_2eproto.base);
  semantics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Content_Group::~Content_Group() {
  // @@protoc_insertion_point(destructor:Content_Group)
  SharedDtor();
}

void Content_Group::SharedDtor() {
  semantics_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Content_Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Content_Group& Content_Group::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Content_Group_RtcSdp_2eproto.base);
  return *internal_default_instance();
}


void Content_Group::Clear() {
// @@protoc_insertion_point(message_clear_start:Content_Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_names_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    semantics_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Content_Group::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Content_Group*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string semantics = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_semantics();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string content_names = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          object = msg->add_content_names();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParser;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Content_Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Content_Group)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string semantics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_semantics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string content_names = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_content_names()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Content_Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Content_Group)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Content_Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Content_Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string semantics = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->semantics(), output);
  }

  // repeated string content_names = 2;
  for (int i = 0, n = this->content_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content_names(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Content_Group)
}

size_t Content_Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Content_Group)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string content_names = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->content_names_size());
  for (int i = 0, n = this->content_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->content_names(i));
  }

  // optional string semantics = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->semantics());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Content_Group::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Content_Group*>(&from));
}

void Content_Group::MergeFrom(const Content_Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Content_Group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  content_names_.MergeFrom(from.content_names_);
  if (from.has_semantics()) {
    _has_bits_[0] |= 0x00000001u;
    semantics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.semantics_);
  }
}

void Content_Group::CopyFrom(const Content_Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Content_Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content_Group::IsInitialized() const {
  return true;
}

void Content_Group::Swap(Content_Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Content_Group::InternalSwap(Content_Group* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  content_names_.InternalSwap(CastToBase(&other->content_names_));
  semantics_.Swap(&other->semantics_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string Content_Group::GetTypeName() const {
  return "Content_Group";
}


// ===================================================================

void Media_Transport_Setting::InitAsDefaultInstance() {
}
class Media_Transport_Setting::HasBitSetters {
 public:
  static void set_has_transport_name(Media_Transport_Setting* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_transport_setting(Media_Transport_Setting* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Media_Transport_Setting::kTransportNameFieldNumber;
const int Media_Transport_Setting::kTransportSettingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Media_Transport_Setting::Media_Transport_Setting()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Media_Transport_Setting)
}
Media_Transport_Setting::Media_Transport_Setting(const Media_Transport_Setting& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transport_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transport_name()) {
    transport_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_name_);
  }
  transport_setting_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_transport_setting()) {
    transport_setting_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_setting_);
  }
  // @@protoc_insertion_point(copy_constructor:Media_Transport_Setting)
}

void Media_Transport_Setting::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Media_Transport_Setting_RtcSdp_2eproto.base);
  transport_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transport_setting_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Media_Transport_Setting::~Media_Transport_Setting() {
  // @@protoc_insertion_point(destructor:Media_Transport_Setting)
  SharedDtor();
}

void Media_Transport_Setting::SharedDtor() {
  transport_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transport_setting_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Media_Transport_Setting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Media_Transport_Setting& Media_Transport_Setting::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Media_Transport_Setting_RtcSdp_2eproto.base);
  return *internal_default_instance();
}


void Media_Transport_Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:Media_Transport_Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      transport_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      transport_setting_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Media_Transport_Setting::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Media_Transport_Setting*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string transport_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transport_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string transport_setting = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_transport_setting();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Media_Transport_Setting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Media_Transport_Setting)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string transport_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transport_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string transport_setting = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transport_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Media_Transport_Setting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Media_Transport_Setting)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Media_Transport_Setting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Media_Transport_Setting)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string transport_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transport_name(), output);
  }

  // optional string transport_setting = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->transport_setting(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Media_Transport_Setting)
}

size_t Media_Transport_Setting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Media_Transport_Setting)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string transport_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transport_name());
    }

    // optional string transport_setting = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transport_setting());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Media_Transport_Setting::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Media_Transport_Setting*>(&from));
}

void Media_Transport_Setting::MergeFrom(const Media_Transport_Setting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Media_Transport_Setting)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      transport_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      transport_setting_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transport_setting_);
    }
  }
}

void Media_Transport_Setting::CopyFrom(const Media_Transport_Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Media_Transport_Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media_Transport_Setting::IsInitialized() const {
  return true;
}

void Media_Transport_Setting::Swap(Media_Transport_Setting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Media_Transport_Setting::InternalSwap(Media_Transport_Setting* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transport_name_.Swap(&other->transport_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transport_setting_.Swap(&other->transport_setting_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string Media_Transport_Setting::GetTypeName() const {
  return "Media_Transport_Setting";
}


// ===================================================================

void Session_Description::InitAsDefaultInstance() {
}
class Session_Description::HasBitSetters {
 public:
  static void set_has_msid_supported(Session_Description* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_msid_signaling(Session_Description* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_extmap_allow_mixed(Session_Description* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session_Description::kContentsFieldNumber;
const int Session_Description::kTransportInfosFieldNumber;
const int Session_Description::kContentGroupsFieldNumber;
const int Session_Description::kMsidSupportedFieldNumber;
const int Session_Description::kMsidSignalingFieldNumber;
const int Session_Description::kExtmapAllowMixedFieldNumber;
const int Session_Description::kMediaTransportSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session_Description::Session_Description()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Session_Description)
}
Session_Description::Session_Description(const Session_Description& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      contents_(from.contents_),
      transport_infos_(from.transport_infos_),
      content_groups_(from.content_groups_),
      media_transport_settings_(from.media_transport_settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msid_signaling_, &from.msid_signaling_,
    static_cast<size_t>(reinterpret_cast<char*>(&extmap_allow_mixed_) -
    reinterpret_cast<char*>(&msid_signaling_)) + sizeof(extmap_allow_mixed_));
  // @@protoc_insertion_point(copy_constructor:Session_Description)
}

void Session_Description::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Session_Description_RtcSdp_2eproto.base);
  ::memset(&msid_signaling_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extmap_allow_mixed_) -
      reinterpret_cast<char*>(&msid_signaling_)) + sizeof(extmap_allow_mixed_));
}

Session_Description::~Session_Description() {
  // @@protoc_insertion_point(destructor:Session_Description)
  SharedDtor();
}

void Session_Description::SharedDtor() {
}

void Session_Description::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Session_Description& Session_Description::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Session_Description_RtcSdp_2eproto.base);
  return *internal_default_instance();
}


void Session_Description::Clear() {
// @@protoc_insertion_point(message_clear_start:Session_Description)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contents_.Clear();
  transport_infos_.Clear();
  content_groups_.Clear();
  media_transport_settings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&msid_signaling_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extmap_allow_mixed_) -
        reinterpret_cast<char*>(&msid_signaling_)) + sizeof(extmap_allow_mixed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Session_Description::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Session_Description*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .Content_Info contents = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Content_Info::_InternalParse;
          object = msg->add_contents();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .Transport_Description transport_infos = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Transport_Description::_InternalParse;
          object = msg->add_transport_infos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .Content_Group content_groups = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Content_Group::_InternalParse;
          object = msg->add_content_groups();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional bool msid_supported = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_msid_supported(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 msid_signaling = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_msid_signaling(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool extmap_allow_mixed = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_extmap_allow_mixed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .Media_Transport_Setting media_transport_settings = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Media_Transport_Setting::_InternalParse;
          object = msg->add_media_transport_settings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Session_Description::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Session_Description)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Content_Info contents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_contents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Transport_Description transport_infos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_transport_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Content_Group content_groups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_content_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool msid_supported = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_msid_supported(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msid_supported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 msid_signaling = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_msid_signaling(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msid_signaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool extmap_allow_mixed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_extmap_allow_mixed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extmap_allow_mixed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Media_Transport_Setting media_transport_settings = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_media_transport_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Session_Description)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Session_Description)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Session_Description::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Session_Description)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Content_Info contents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->contents(static_cast<int>(i)),
      output);
  }

  // repeated .Transport_Description transport_infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transport_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->transport_infos(static_cast<int>(i)),
      output);
  }

  // repeated .Content_Group content_groups = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->content_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->content_groups(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool msid_supported = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->msid_supported(), output);
  }

  // optional int32 msid_signaling = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->msid_signaling(), output);
  }

  // optional bool extmap_allow_mixed = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->extmap_allow_mixed(), output);
  }

  // repeated .Media_Transport_Setting media_transport_settings = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->media_transport_settings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7,
      this->media_transport_settings(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Session_Description)
}

size_t Session_Description::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Session_Description)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Content_Info contents = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->contents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->contents(static_cast<int>(i)));
    }
  }

  // repeated .Transport_Description transport_infos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->transport_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->transport_infos(static_cast<int>(i)));
    }
  }

  // repeated .Content_Group content_groups = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->content_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->content_groups(static_cast<int>(i)));
    }
  }

  // repeated .Media_Transport_Setting media_transport_settings = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->media_transport_settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->media_transport_settings(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 msid_signaling = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msid_signaling());
    }

    // optional bool msid_supported = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool extmap_allow_mixed = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Session_Description::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Session_Description*>(&from));
}

void Session_Description::MergeFrom(const Session_Description& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Session_Description)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contents_.MergeFrom(from.contents_);
  transport_infos_.MergeFrom(from.transport_infos_);
  content_groups_.MergeFrom(from.content_groups_);
  media_transport_settings_.MergeFrom(from.media_transport_settings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      msid_signaling_ = from.msid_signaling_;
    }
    if (cached_has_bits & 0x00000002u) {
      msid_supported_ = from.msid_supported_;
    }
    if (cached_has_bits & 0x00000004u) {
      extmap_allow_mixed_ = from.extmap_allow_mixed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Session_Description::CopyFrom(const Session_Description& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Session_Description)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session_Description::IsInitialized() const {
  return true;
}

void Session_Description::Swap(Session_Description* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session_Description::InternalSwap(Session_Description* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&contents_)->InternalSwap(CastToBase(&other->contents_));
  CastToBase(&transport_infos_)->InternalSwap(CastToBase(&other->transport_infos_));
  CastToBase(&content_groups_)->InternalSwap(CastToBase(&other->content_groups_));
  CastToBase(&media_transport_settings_)->InternalSwap(CastToBase(&other->media_transport_settings_));
  swap(msid_signaling_, other->msid_signaling_);
  swap(msid_supported_, other->msid_supported_);
  swap(extmap_allow_mixed_, other->extmap_allow_mixed_);
}

::std::string Session_Description::GetTypeName() const {
  return "Session_Description";
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Transport_Description* Arena::CreateMaybeMessage< ::Transport_Description >(Arena* arena) {
  return Arena::CreateInternal< ::Transport_Description >(arena);
}
template<> PROTOBUF_NOINLINE ::Stream_Params* Arena::CreateMaybeMessage< ::Stream_Params >(Arena* arena) {
  return Arena::CreateInternal< ::Stream_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::Media_Content_Description* Arena::CreateMaybeMessage< ::Media_Content_Description >(Arena* arena) {
  return Arena::CreateInternal< ::Media_Content_Description >(arena);
}
template<> PROTOBUF_NOINLINE ::Content_Info* Arena::CreateMaybeMessage< ::Content_Info >(Arena* arena) {
  return Arena::CreateInternal< ::Content_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::Content_Group* Arena::CreateMaybeMessage< ::Content_Group >(Arena* arena) {
  return Arena::CreateInternal< ::Content_Group >(arena);
}
template<> PROTOBUF_NOINLINE ::Media_Transport_Setting* Arena::CreateMaybeMessage< ::Media_Transport_Setting >(Arena* arena) {
  return Arena::CreateInternal< ::Media_Transport_Setting >(arena);
}
template<> PROTOBUF_NOINLINE ::Session_Description* Arena::CreateMaybeMessage< ::Session_Description >(Arena* arena) {
  return Arena::CreateInternal< ::Session_Description >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

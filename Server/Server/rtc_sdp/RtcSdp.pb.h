// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RtcSdp.proto

#ifndef PROTOBUF_INCLUDED_RtcSdp_2eproto
#define PROTOBUF_INCLUDED_RtcSdp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "RtcSdpDefine.pb.h"
#include "RtcSdpEnumDefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RtcSdp_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_RtcSdp_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
class Content_Group;
class Content_GroupDefaultTypeInternal;
extern Content_GroupDefaultTypeInternal _Content_Group_default_instance_;
class Content_Info;
class Content_InfoDefaultTypeInternal;
extern Content_InfoDefaultTypeInternal _Content_Info_default_instance_;
class Media_Content_Description;
class Media_Content_DescriptionDefaultTypeInternal;
extern Media_Content_DescriptionDefaultTypeInternal _Media_Content_Description_default_instance_;
class Media_Transport_Setting;
class Media_Transport_SettingDefaultTypeInternal;
extern Media_Transport_SettingDefaultTypeInternal _Media_Transport_Setting_default_instance_;
class Session_Description;
class Session_DescriptionDefaultTypeInternal;
extern Session_DescriptionDefaultTypeInternal _Session_Description_default_instance_;
class Stream_Params;
class Stream_ParamsDefaultTypeInternal;
extern Stream_ParamsDefaultTypeInternal _Stream_Params_default_instance_;
class Transport_Description;
class Transport_DescriptionDefaultTypeInternal;
extern Transport_DescriptionDefaultTypeInternal _Transport_Description_default_instance_;
namespace google {
namespace protobuf {
template<> ::Content_Group* Arena::CreateMaybeMessage<::Content_Group>(Arena*);
template<> ::Content_Info* Arena::CreateMaybeMessage<::Content_Info>(Arena*);
template<> ::Media_Content_Description* Arena::CreateMaybeMessage<::Media_Content_Description>(Arena*);
template<> ::Media_Transport_Setting* Arena::CreateMaybeMessage<::Media_Transport_Setting>(Arena*);
template<> ::Session_Description* Arena::CreateMaybeMessage<::Session_Description>(Arena*);
template<> ::Stream_Params* Arena::CreateMaybeMessage<::Stream_Params>(Arena*);
template<> ::Transport_Description* Arena::CreateMaybeMessage<::Transport_Description>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Transport_Description final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Transport_Description) */ {
 public:
  Transport_Description();
  virtual ~Transport_Description();

  Transport_Description(const Transport_Description& from);

  inline Transport_Description& operator=(const Transport_Description& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_Description(Transport_Description&& from) noexcept
    : Transport_Description() {
    *this = ::std::move(from);
  }

  inline Transport_Description& operator=(Transport_Description&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Transport_Description& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transport_Description* internal_default_instance() {
    return reinterpret_cast<const Transport_Description*>(
               &_Transport_Description_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Transport_Description* other);
  friend void swap(Transport_Description& a, Transport_Description& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_Description* New() const final {
    return CreateMaybeMessage<Transport_Description>(nullptr);
  }

  Transport_Description* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transport_Description>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Transport_Description& from);
  void MergeFrom(const Transport_Description& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transport_Description* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string transport_options = 2;
  int transport_options_size() const;
  void clear_transport_options();
  static const int kTransportOptionsFieldNumber = 2;
  const ::std::string& transport_options(int index) const;
  ::std::string* mutable_transport_options(int index);
  void set_transport_options(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_transport_options(int index, ::std::string&& value);
  #endif
  void set_transport_options(int index, const char* value);
  void set_transport_options(int index, const char* value, size_t size);
  ::std::string* add_transport_options();
  void add_transport_options(const ::std::string& value);
  #if LANG_CXX11
  void add_transport_options(::std::string&& value);
  #endif
  void add_transport_options(const char* value);
  void add_transport_options(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& transport_options() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_transport_options();

  // optional string content_name = 1;
  bool has_content_name() const;
  void clear_content_name();
  static const int kContentNameFieldNumber = 1;
  const ::std::string& content_name() const;
  void set_content_name(const ::std::string& value);
  #if LANG_CXX11
  void set_content_name(::std::string&& value);
  #endif
  void set_content_name(const char* value);
  void set_content_name(const char* value, size_t size);
  ::std::string* mutable_content_name();
  ::std::string* release_content_name();
  void set_allocated_content_name(::std::string* content_name);

  // optional string ice_ufrag = 3;
  bool has_ice_ufrag() const;
  void clear_ice_ufrag();
  static const int kIceUfragFieldNumber = 3;
  const ::std::string& ice_ufrag() const;
  void set_ice_ufrag(const ::std::string& value);
  #if LANG_CXX11
  void set_ice_ufrag(::std::string&& value);
  #endif
  void set_ice_ufrag(const char* value);
  void set_ice_ufrag(const char* value, size_t size);
  ::std::string* mutable_ice_ufrag();
  ::std::string* release_ice_ufrag();
  void set_allocated_ice_ufrag(::std::string* ice_ufrag);

  // optional string ice_pwd = 4;
  bool has_ice_pwd() const;
  void clear_ice_pwd();
  static const int kIcePwdFieldNumber = 4;
  const ::std::string& ice_pwd() const;
  void set_ice_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_ice_pwd(::std::string&& value);
  #endif
  void set_ice_pwd(const char* value);
  void set_ice_pwd(const char* value, size_t size);
  ::std::string* mutable_ice_pwd();
  ::std::string* release_ice_pwd();
  void set_allocated_ice_pwd(::std::string* ice_pwd);

  // optional .Ssl_Fignerpint identity_fingerprint = 7;
  bool has_identity_fingerprint() const;
  void clear_identity_fingerprint();
  static const int kIdentityFingerprintFieldNumber = 7;
  const ::Ssl_Fignerpint& identity_fingerprint() const;
  ::Ssl_Fignerpint* release_identity_fingerprint();
  ::Ssl_Fignerpint* mutable_identity_fingerprint();
  void set_allocated_identity_fingerprint(::Ssl_Fignerpint* identity_fingerprint);

  // optional .Ice_Mode ice_mode = 5;
  bool has_ice_mode() const;
  void clear_ice_mode();
  static const int kIceModeFieldNumber = 5;
  ::Ice_Mode ice_mode() const;
  void set_ice_mode(::Ice_Mode value);

  // optional .Connection_Role connection_role = 6;
  bool has_connection_role() const;
  void clear_connection_role();
  static const int kConnectionRoleFieldNumber = 6;
  ::Connection_Role connection_role() const;
  void set_connection_role(::Connection_Role value);

  // @@protoc_insertion_point(class_scope:Transport_Description)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> transport_options_;
  ::google::protobuf::internal::ArenaStringPtr content_name_;
  ::google::protobuf::internal::ArenaStringPtr ice_ufrag_;
  ::google::protobuf::internal::ArenaStringPtr ice_pwd_;
  ::Ssl_Fignerpint* identity_fingerprint_;
  int ice_mode_;
  int connection_role_;
  friend struct ::TableStruct_RtcSdp_2eproto;
};
// -------------------------------------------------------------------

class Stream_Params final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Stream_Params) */ {
 public:
  Stream_Params();
  virtual ~Stream_Params();

  Stream_Params(const Stream_Params& from);

  inline Stream_Params& operator=(const Stream_Params& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stream_Params(Stream_Params&& from) noexcept
    : Stream_Params() {
    *this = ::std::move(from);
  }

  inline Stream_Params& operator=(Stream_Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Stream_Params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stream_Params* internal_default_instance() {
    return reinterpret_cast<const Stream_Params*>(
               &_Stream_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Stream_Params* other);
  friend void swap(Stream_Params& a, Stream_Params& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stream_Params* New() const final {
    return CreateMaybeMessage<Stream_Params>(nullptr);
  }

  Stream_Params* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stream_Params>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Stream_Params& from);
  void MergeFrom(const Stream_Params& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Stream_Params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ssrcs = 3;
  int ssrcs_size() const;
  void clear_ssrcs();
  static const int kSsrcsFieldNumber = 3;
  ::google::protobuf::uint32 ssrcs(int index) const;
  void set_ssrcs(int index, ::google::protobuf::uint32 value);
  void add_ssrcs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ssrcs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ssrcs();

  // repeated .Ssrc_Group ssrc_groups = 4;
  int ssrc_groups_size() const;
  void clear_ssrc_groups();
  static const int kSsrcGroupsFieldNumber = 4;
  ::Ssrc_Group* mutable_ssrc_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::Ssrc_Group >*
      mutable_ssrc_groups();
  const ::Ssrc_Group& ssrc_groups(int index) const;
  ::Ssrc_Group* add_ssrc_groups();
  const ::google::protobuf::RepeatedPtrField< ::Ssrc_Group >&
      ssrc_groups() const;

  // repeated string stream_ids = 6;
  int stream_ids_size() const;
  void clear_stream_ids();
  static const int kStreamIdsFieldNumber = 6;
  const ::std::string& stream_ids(int index) const;
  ::std::string* mutable_stream_ids(int index);
  void set_stream_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_stream_ids(int index, ::std::string&& value);
  #endif
  void set_stream_ids(int index, const char* value);
  void set_stream_ids(int index, const char* value, size_t size);
  ::std::string* add_stream_ids();
  void add_stream_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_stream_ids(::std::string&& value);
  #endif
  void add_stream_ids(const char* value);
  void add_stream_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& stream_ids() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_stream_ids();

  // repeated .Rid_Description rids = 7;
  int rids_size() const;
  void clear_rids();
  static const int kRidsFieldNumber = 7;
  ::Rid_Description* mutable_rids(int index);
  ::google::protobuf::RepeatedPtrField< ::Rid_Description >*
      mutable_rids();
  const ::Rid_Description& rids(int index) const;
  ::Rid_Description* add_rids();
  const ::google::protobuf::RepeatedPtrField< ::Rid_Description >&
      rids() const;

  // optional string groupid = 1;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  const ::std::string& groupid() const;
  void set_groupid(const ::std::string& value);
  #if LANG_CXX11
  void set_groupid(::std::string&& value);
  #endif
  void set_groupid(const char* value);
  void set_groupid(const char* value, size_t size);
  ::std::string* mutable_groupid();
  ::std::string* release_groupid();
  void set_allocated_groupid(::std::string* groupid);

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string cname = 5;
  bool has_cname() const;
  void clear_cname();
  static const int kCnameFieldNumber = 5;
  const ::std::string& cname() const;
  void set_cname(const ::std::string& value);
  #if LANG_CXX11
  void set_cname(::std::string&& value);
  #endif
  void set_cname(const char* value);
  void set_cname(const char* value, size_t size);
  ::std::string* mutable_cname();
  ::std::string* release_cname();
  void set_allocated_cname(::std::string* cname);

  // @@protoc_insertion_point(class_scope:Stream_Params)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ssrcs_;
  ::google::protobuf::RepeatedPtrField< ::Ssrc_Group > ssrc_groups_;
  ::google::protobuf::RepeatedPtrField<::std::string> stream_ids_;
  ::google::protobuf::RepeatedPtrField< ::Rid_Description > rids_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr cname_;
  friend struct ::TableStruct_RtcSdp_2eproto;
};
// -------------------------------------------------------------------

class Media_Content_Description final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Media_Content_Description) */ {
 public:
  Media_Content_Description();
  virtual ~Media_Content_Description();

  Media_Content_Description(const Media_Content_Description& from);

  inline Media_Content_Description& operator=(const Media_Content_Description& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Media_Content_Description(Media_Content_Description&& from) noexcept
    : Media_Content_Description() {
    *this = ::std::move(from);
  }

  inline Media_Content_Description& operator=(Media_Content_Description&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Media_Content_Description& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Media_Content_Description* internal_default_instance() {
    return reinterpret_cast<const Media_Content_Description*>(
               &_Media_Content_Description_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Media_Content_Description* other);
  friend void swap(Media_Content_Description& a, Media_Content_Description& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Media_Content_Description* New() const final {
    return CreateMaybeMessage<Media_Content_Description>(nullptr);
  }

  Media_Content_Description* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Media_Content_Description>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Media_Content_Description& from);
  void MergeFrom(const Media_Content_Description& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Media_Content_Description* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Crypto_Params cryptos = 5;
  int cryptos_size() const;
  void clear_cryptos();
  static const int kCryptosFieldNumber = 5;
  ::Crypto_Params* mutable_cryptos(int index);
  ::google::protobuf::RepeatedPtrField< ::Crypto_Params >*
      mutable_cryptos();
  const ::Crypto_Params& cryptos(int index) const;
  ::Crypto_Params* add_cryptos();
  const ::google::protobuf::RepeatedPtrField< ::Crypto_Params >&
      cryptos() const;

  // repeated .Rtp_Extension rtp_header_extensions = 6;
  int rtp_header_extensions_size() const;
  void clear_rtp_header_extensions();
  static const int kRtpHeaderExtensionsFieldNumber = 6;
  ::Rtp_Extension* mutable_rtp_header_extensions(int index);
  ::google::protobuf::RepeatedPtrField< ::Rtp_Extension >*
      mutable_rtp_header_extensions();
  const ::Rtp_Extension& rtp_header_extensions(int index) const;
  ::Rtp_Extension* add_rtp_header_extensions();
  const ::google::protobuf::RepeatedPtrField< ::Rtp_Extension >&
      rtp_header_extensions() const;

  // repeated .Stream_Params send_streams = 8;
  int send_streams_size() const;
  void clear_send_streams();
  static const int kSendStreamsFieldNumber = 8;
  ::Stream_Params* mutable_send_streams(int index);
  ::google::protobuf::RepeatedPtrField< ::Stream_Params >*
      mutable_send_streams();
  const ::Stream_Params& send_streams(int index) const;
  ::Stream_Params* add_send_streams();
  const ::google::protobuf::RepeatedPtrField< ::Stream_Params >&
      send_streams() const;

  // optional string protocol = 4;
  bool has_protocol() const;
  void clear_protocol();
  static const int kProtocolFieldNumber = 4;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // optional .Socket_Address connection_address = 11;
  bool has_connection_address() const;
  void clear_connection_address();
  static const int kConnectionAddressFieldNumber = 11;
  const ::Socket_Address& connection_address() const;
  ::Socket_Address* release_connection_address();
  ::Socket_Address* mutable_connection_address();
  void set_allocated_connection_address(::Socket_Address* connection_address);

  // optional .Simulcast_Description simulcast = 13;
  bool has_simulcast() const;
  void clear_simulcast();
  static const int kSimulcastFieldNumber = 13;
  const ::Simulcast_Description& simulcast() const;
  ::Simulcast_Description* release_simulcast();
  ::Simulcast_Description* mutable_simulcast();
  void set_allocated_simulcast(::Simulcast_Description* simulcast);

  // optional int32 bandwidth = 3;
  bool has_bandwidth() const;
  void clear_bandwidth();
  static const int kBandwidthFieldNumber = 3;
  ::google::protobuf::int32 bandwidth() const;
  void set_bandwidth(::google::protobuf::int32 value);

  // optional bool rtcp_mux = 1;
  bool has_rtcp_mux() const;
  void clear_rtcp_mux();
  static const int kRtcpMuxFieldNumber = 1;
  bool rtcp_mux() const;
  void set_rtcp_mux(bool value);

  // optional bool rtcp_reduced_size = 2;
  bool has_rtcp_reduced_size() const;
  void clear_rtcp_reduced_size();
  static const int kRtcpReducedSizeFieldNumber = 2;
  bool rtcp_reduced_size() const;
  void set_rtcp_reduced_size(bool value);

  // optional bool rtp_header_extensions_set = 7;
  bool has_rtp_header_extensions_set() const;
  void clear_rtp_header_extensions_set();
  static const int kRtpHeaderExtensionsSetFieldNumber = 7;
  bool rtp_header_extensions_set() const;
  void set_rtp_header_extensions_set(bool value);

  // optional bool conference_mode = 9;
  bool has_conference_mode() const;
  void clear_conference_mode();
  static const int kConferenceModeFieldNumber = 9;
  bool conference_mode() const;
  void set_conference_mode(bool value);

  // optional .Rtp_Transceiver_Direction direction = 10;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 10;
  ::Rtp_Transceiver_Direction direction() const;
  void set_direction(::Rtp_Transceiver_Direction value);

  // optional .Extmap_Allow_Mixed extmap_allow_mixed_enum = 12;
  bool has_extmap_allow_mixed_enum() const;
  void clear_extmap_allow_mixed_enum();
  static const int kExtmapAllowMixedEnumFieldNumber = 12;
  ::Extmap_Allow_Mixed extmap_allow_mixed_enum() const;
  void set_extmap_allow_mixed_enum(::Extmap_Allow_Mixed value);

  // @@protoc_insertion_point(class_scope:Media_Content_Description)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Crypto_Params > cryptos_;
  ::google::protobuf::RepeatedPtrField< ::Rtp_Extension > rtp_header_extensions_;
  ::google::protobuf::RepeatedPtrField< ::Stream_Params > send_streams_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::Socket_Address* connection_address_;
  ::Simulcast_Description* simulcast_;
  ::google::protobuf::int32 bandwidth_;
  bool rtcp_mux_;
  bool rtcp_reduced_size_;
  bool rtp_header_extensions_set_;
  bool conference_mode_;
  int direction_;
  int extmap_allow_mixed_enum_;
  friend struct ::TableStruct_RtcSdp_2eproto;
};
// -------------------------------------------------------------------

class Content_Info final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Content_Info) */ {
 public:
  Content_Info();
  virtual ~Content_Info();

  Content_Info(const Content_Info& from);

  inline Content_Info& operator=(const Content_Info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Content_Info(Content_Info&& from) noexcept
    : Content_Info() {
    *this = ::std::move(from);
  }

  inline Content_Info& operator=(Content_Info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Content_Info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Content_Info* internal_default_instance() {
    return reinterpret_cast<const Content_Info*>(
               &_Content_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Content_Info* other);
  friend void swap(Content_Info& a, Content_Info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Content_Info* New() const final {
    return CreateMaybeMessage<Content_Info>(nullptr);
  }

  Content_Info* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Content_Info>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Content_Info& from);
  void MergeFrom(const Content_Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Content_Info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .Media_Content_Description description = 5;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::Media_Content_Description& description() const;
  ::Media_Content_Description* release_description();
  ::Media_Content_Description* mutable_description();
  void set_allocated_description(::Media_Content_Description* description);

  // optional .Media_Protocol_Type type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Media_Protocol_Type type() const;
  void set_type(::Media_Protocol_Type value);

  // optional bool rejected = 3;
  bool has_rejected() const;
  void clear_rejected();
  static const int kRejectedFieldNumber = 3;
  bool rejected() const;
  void set_rejected(bool value);

  // optional bool bundle_only = 4;
  bool has_bundle_only() const;
  void clear_bundle_only();
  static const int kBundleOnlyFieldNumber = 4;
  bool bundle_only() const;
  void set_bundle_only(bool value);

  // @@protoc_insertion_point(class_scope:Content_Info)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Media_Content_Description* description_;
  int type_;
  bool rejected_;
  bool bundle_only_;
  friend struct ::TableStruct_RtcSdp_2eproto;
};
// -------------------------------------------------------------------

class Content_Group final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Content_Group) */ {
 public:
  Content_Group();
  virtual ~Content_Group();

  Content_Group(const Content_Group& from);

  inline Content_Group& operator=(const Content_Group& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Content_Group(Content_Group&& from) noexcept
    : Content_Group() {
    *this = ::std::move(from);
  }

  inline Content_Group& operator=(Content_Group&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Content_Group& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Content_Group* internal_default_instance() {
    return reinterpret_cast<const Content_Group*>(
               &_Content_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Content_Group* other);
  friend void swap(Content_Group& a, Content_Group& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Content_Group* New() const final {
    return CreateMaybeMessage<Content_Group>(nullptr);
  }

  Content_Group* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Content_Group>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Content_Group& from);
  void MergeFrom(const Content_Group& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Content_Group* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string content_names = 2;
  int content_names_size() const;
  void clear_content_names();
  static const int kContentNamesFieldNumber = 2;
  const ::std::string& content_names(int index) const;
  ::std::string* mutable_content_names(int index);
  void set_content_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_content_names(int index, ::std::string&& value);
  #endif
  void set_content_names(int index, const char* value);
  void set_content_names(int index, const char* value, size_t size);
  ::std::string* add_content_names();
  void add_content_names(const ::std::string& value);
  #if LANG_CXX11
  void add_content_names(::std::string&& value);
  #endif
  void add_content_names(const char* value);
  void add_content_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& content_names() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_content_names();

  // optional string semantics = 1;
  bool has_semantics() const;
  void clear_semantics();
  static const int kSemanticsFieldNumber = 1;
  const ::std::string& semantics() const;
  void set_semantics(const ::std::string& value);
  #if LANG_CXX11
  void set_semantics(::std::string&& value);
  #endif
  void set_semantics(const char* value);
  void set_semantics(const char* value, size_t size);
  ::std::string* mutable_semantics();
  ::std::string* release_semantics();
  void set_allocated_semantics(::std::string* semantics);

  // @@protoc_insertion_point(class_scope:Content_Group)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> content_names_;
  ::google::protobuf::internal::ArenaStringPtr semantics_;
  friend struct ::TableStruct_RtcSdp_2eproto;
};
// -------------------------------------------------------------------

class Media_Transport_Setting final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Media_Transport_Setting) */ {
 public:
  Media_Transport_Setting();
  virtual ~Media_Transport_Setting();

  Media_Transport_Setting(const Media_Transport_Setting& from);

  inline Media_Transport_Setting& operator=(const Media_Transport_Setting& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Media_Transport_Setting(Media_Transport_Setting&& from) noexcept
    : Media_Transport_Setting() {
    *this = ::std::move(from);
  }

  inline Media_Transport_Setting& operator=(Media_Transport_Setting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Media_Transport_Setting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Media_Transport_Setting* internal_default_instance() {
    return reinterpret_cast<const Media_Transport_Setting*>(
               &_Media_Transport_Setting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Media_Transport_Setting* other);
  friend void swap(Media_Transport_Setting& a, Media_Transport_Setting& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Media_Transport_Setting* New() const final {
    return CreateMaybeMessage<Media_Transport_Setting>(nullptr);
  }

  Media_Transport_Setting* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Media_Transport_Setting>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Media_Transport_Setting& from);
  void MergeFrom(const Media_Transport_Setting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Media_Transport_Setting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string transport_name = 1;
  bool has_transport_name() const;
  void clear_transport_name();
  static const int kTransportNameFieldNumber = 1;
  const ::std::string& transport_name() const;
  void set_transport_name(const ::std::string& value);
  #if LANG_CXX11
  void set_transport_name(::std::string&& value);
  #endif
  void set_transport_name(const char* value);
  void set_transport_name(const char* value, size_t size);
  ::std::string* mutable_transport_name();
  ::std::string* release_transport_name();
  void set_allocated_transport_name(::std::string* transport_name);

  // optional string transport_setting = 2;
  bool has_transport_setting() const;
  void clear_transport_setting();
  static const int kTransportSettingFieldNumber = 2;
  const ::std::string& transport_setting() const;
  void set_transport_setting(const ::std::string& value);
  #if LANG_CXX11
  void set_transport_setting(::std::string&& value);
  #endif
  void set_transport_setting(const char* value);
  void set_transport_setting(const char* value, size_t size);
  ::std::string* mutable_transport_setting();
  ::std::string* release_transport_setting();
  void set_allocated_transport_setting(::std::string* transport_setting);

  // @@protoc_insertion_point(class_scope:Media_Transport_Setting)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr transport_name_;
  ::google::protobuf::internal::ArenaStringPtr transport_setting_;
  friend struct ::TableStruct_RtcSdp_2eproto;
};
// -------------------------------------------------------------------

class Session_Description final :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Session_Description) */ {
 public:
  Session_Description();
  virtual ~Session_Description();

  Session_Description(const Session_Description& from);

  inline Session_Description& operator=(const Session_Description& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Session_Description(Session_Description&& from) noexcept
    : Session_Description() {
    *this = ::std::move(from);
  }

  inline Session_Description& operator=(Session_Description&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Session_Description& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session_Description* internal_default_instance() {
    return reinterpret_cast<const Session_Description*>(
               &_Session_Description_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Session_Description* other);
  friend void swap(Session_Description& a, Session_Description& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Session_Description* New() const final {
    return CreateMaybeMessage<Session_Description>(nullptr);
  }

  Session_Description* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Session_Description>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Session_Description& from);
  void MergeFrom(const Session_Description& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Session_Description* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Content_Info contents = 1;
  int contents_size() const;
  void clear_contents();
  static const int kContentsFieldNumber = 1;
  ::Content_Info* mutable_contents(int index);
  ::google::protobuf::RepeatedPtrField< ::Content_Info >*
      mutable_contents();
  const ::Content_Info& contents(int index) const;
  ::Content_Info* add_contents();
  const ::google::protobuf::RepeatedPtrField< ::Content_Info >&
      contents() const;

  // repeated .Transport_Description transport_infos = 2;
  int transport_infos_size() const;
  void clear_transport_infos();
  static const int kTransportInfosFieldNumber = 2;
  ::Transport_Description* mutable_transport_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::Transport_Description >*
      mutable_transport_infos();
  const ::Transport_Description& transport_infos(int index) const;
  ::Transport_Description* add_transport_infos();
  const ::google::protobuf::RepeatedPtrField< ::Transport_Description >&
      transport_infos() const;

  // repeated .Content_Group content_groups = 3;
  int content_groups_size() const;
  void clear_content_groups();
  static const int kContentGroupsFieldNumber = 3;
  ::Content_Group* mutable_content_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::Content_Group >*
      mutable_content_groups();
  const ::Content_Group& content_groups(int index) const;
  ::Content_Group* add_content_groups();
  const ::google::protobuf::RepeatedPtrField< ::Content_Group >&
      content_groups() const;

  // repeated .Media_Transport_Setting media_transport_settings = 7;
  int media_transport_settings_size() const;
  void clear_media_transport_settings();
  static const int kMediaTransportSettingsFieldNumber = 7;
  ::Media_Transport_Setting* mutable_media_transport_settings(int index);
  ::google::protobuf::RepeatedPtrField< ::Media_Transport_Setting >*
      mutable_media_transport_settings();
  const ::Media_Transport_Setting& media_transport_settings(int index) const;
  ::Media_Transport_Setting* add_media_transport_settings();
  const ::google::protobuf::RepeatedPtrField< ::Media_Transport_Setting >&
      media_transport_settings() const;

  // optional int32 msid_signaling = 5;
  bool has_msid_signaling() const;
  void clear_msid_signaling();
  static const int kMsidSignalingFieldNumber = 5;
  ::google::protobuf::int32 msid_signaling() const;
  void set_msid_signaling(::google::protobuf::int32 value);

  // optional bool msid_supported = 4;
  bool has_msid_supported() const;
  void clear_msid_supported();
  static const int kMsidSupportedFieldNumber = 4;
  bool msid_supported() const;
  void set_msid_supported(bool value);

  // optional bool extmap_allow_mixed = 6;
  bool has_extmap_allow_mixed() const;
  void clear_extmap_allow_mixed();
  static const int kExtmapAllowMixedFieldNumber = 6;
  bool extmap_allow_mixed() const;
  void set_extmap_allow_mixed(bool value);

  // @@protoc_insertion_point(class_scope:Session_Description)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Content_Info > contents_;
  ::google::protobuf::RepeatedPtrField< ::Transport_Description > transport_infos_;
  ::google::protobuf::RepeatedPtrField< ::Content_Group > content_groups_;
  ::google::protobuf::RepeatedPtrField< ::Media_Transport_Setting > media_transport_settings_;
  ::google::protobuf::int32 msid_signaling_;
  bool msid_supported_;
  bool extmap_allow_mixed_;
  friend struct ::TableStruct_RtcSdp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transport_Description

// optional string content_name = 1;
inline bool Transport_Description::has_content_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_Description::clear_content_name() {
  content_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Transport_Description::content_name() const {
  // @@protoc_insertion_point(field_get:Transport_Description.content_name)
  return content_name_.GetNoArena();
}
inline void Transport_Description::set_content_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transport_Description.content_name)
}
#if LANG_CXX11
inline void Transport_Description::set_content_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transport_Description.content_name)
}
#endif
inline void Transport_Description::set_content_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transport_Description.content_name)
}
inline void Transport_Description::set_content_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transport_Description.content_name)
}
inline ::std::string* Transport_Description::mutable_content_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Transport_Description.content_name)
  return content_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_Description::release_content_name() {
  // @@protoc_insertion_point(field_release:Transport_Description.content_name)
  if (!has_content_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_Description::set_allocated_content_name(::std::string* content_name) {
  if (content_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content_name);
  // @@protoc_insertion_point(field_set_allocated:Transport_Description.content_name)
}

// repeated string transport_options = 2;
inline int Transport_Description::transport_options_size() const {
  return transport_options_.size();
}
inline void Transport_Description::clear_transport_options() {
  transport_options_.Clear();
}
inline const ::std::string& Transport_Description::transport_options(int index) const {
  // @@protoc_insertion_point(field_get:Transport_Description.transport_options)
  return transport_options_.Get(index);
}
inline ::std::string* Transport_Description::mutable_transport_options(int index) {
  // @@protoc_insertion_point(field_mutable:Transport_Description.transport_options)
  return transport_options_.Mutable(index);
}
inline void Transport_Description::set_transport_options(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Transport_Description.transport_options)
  transport_options_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Transport_Description::set_transport_options(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Transport_Description.transport_options)
  transport_options_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Transport_Description::set_transport_options(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transport_options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Transport_Description.transport_options)
}
inline void Transport_Description::set_transport_options(int index, const char* value, size_t size) {
  transport_options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Transport_Description.transport_options)
}
inline ::std::string* Transport_Description::add_transport_options() {
  // @@protoc_insertion_point(field_add_mutable:Transport_Description.transport_options)
  return transport_options_.Add();
}
inline void Transport_Description::add_transport_options(const ::std::string& value) {
  transport_options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Transport_Description.transport_options)
}
#if LANG_CXX11
inline void Transport_Description::add_transport_options(::std::string&& value) {
  transport_options_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Transport_Description.transport_options)
}
#endif
inline void Transport_Description::add_transport_options(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transport_options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Transport_Description.transport_options)
}
inline void Transport_Description::add_transport_options(const char* value, size_t size) {
  transport_options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Transport_Description.transport_options)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Transport_Description::transport_options() const {
  // @@protoc_insertion_point(field_list:Transport_Description.transport_options)
  return transport_options_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Transport_Description::mutable_transport_options() {
  // @@protoc_insertion_point(field_mutable_list:Transport_Description.transport_options)
  return &transport_options_;
}

// optional string ice_ufrag = 3;
inline bool Transport_Description::has_ice_ufrag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_Description::clear_ice_ufrag() {
  ice_ufrag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& Transport_Description::ice_ufrag() const {
  // @@protoc_insertion_point(field_get:Transport_Description.ice_ufrag)
  return ice_ufrag_.GetNoArena();
}
inline void Transport_Description::set_ice_ufrag(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  ice_ufrag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transport_Description.ice_ufrag)
}
#if LANG_CXX11
inline void Transport_Description::set_ice_ufrag(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  ice_ufrag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transport_Description.ice_ufrag)
}
#endif
inline void Transport_Description::set_ice_ufrag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  ice_ufrag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transport_Description.ice_ufrag)
}
inline void Transport_Description::set_ice_ufrag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  ice_ufrag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transport_Description.ice_ufrag)
}
inline ::std::string* Transport_Description::mutable_ice_ufrag() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Transport_Description.ice_ufrag)
  return ice_ufrag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_Description::release_ice_ufrag() {
  // @@protoc_insertion_point(field_release:Transport_Description.ice_ufrag)
  if (!has_ice_ufrag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return ice_ufrag_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_Description::set_allocated_ice_ufrag(::std::string* ice_ufrag) {
  if (ice_ufrag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ice_ufrag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_ufrag);
  // @@protoc_insertion_point(field_set_allocated:Transport_Description.ice_ufrag)
}

// optional string ice_pwd = 4;
inline bool Transport_Description::has_ice_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transport_Description::clear_ice_pwd() {
  ice_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& Transport_Description::ice_pwd() const {
  // @@protoc_insertion_point(field_get:Transport_Description.ice_pwd)
  return ice_pwd_.GetNoArena();
}
inline void Transport_Description::set_ice_pwd(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ice_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transport_Description.ice_pwd)
}
#if LANG_CXX11
inline void Transport_Description::set_ice_pwd(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ice_pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transport_Description.ice_pwd)
}
#endif
inline void Transport_Description::set_ice_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ice_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transport_Description.ice_pwd)
}
inline void Transport_Description::set_ice_pwd(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ice_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transport_Description.ice_pwd)
}
inline ::std::string* Transport_Description::mutable_ice_pwd() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:Transport_Description.ice_pwd)
  return ice_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_Description::release_ice_pwd() {
  // @@protoc_insertion_point(field_release:Transport_Description.ice_pwd)
  if (!has_ice_pwd()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ice_pwd_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_Description::set_allocated_ice_pwd(::std::string* ice_pwd) {
  if (ice_pwd != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ice_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_pwd);
  // @@protoc_insertion_point(field_set_allocated:Transport_Description.ice_pwd)
}

// optional .Ice_Mode ice_mode = 5;
inline bool Transport_Description::has_ice_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transport_Description::clear_ice_mode() {
  ice_mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::Ice_Mode Transport_Description::ice_mode() const {
  // @@protoc_insertion_point(field_get:Transport_Description.ice_mode)
  return static_cast< ::Ice_Mode >(ice_mode_);
}
inline void Transport_Description::set_ice_mode(::Ice_Mode value) {
  assert(::Ice_Mode_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  ice_mode_ = value;
  // @@protoc_insertion_point(field_set:Transport_Description.ice_mode)
}

// optional .Connection_Role connection_role = 6;
inline bool Transport_Description::has_connection_role() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transport_Description::clear_connection_role() {
  connection_role_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::Connection_Role Transport_Description::connection_role() const {
  // @@protoc_insertion_point(field_get:Transport_Description.connection_role)
  return static_cast< ::Connection_Role >(connection_role_);
}
inline void Transport_Description::set_connection_role(::Connection_Role value) {
  assert(::Connection_Role_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  connection_role_ = value;
  // @@protoc_insertion_point(field_set:Transport_Description.connection_role)
}

// optional .Ssl_Fignerpint identity_fingerprint = 7;
inline bool Transport_Description::has_identity_fingerprint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::Ssl_Fignerpint& Transport_Description::identity_fingerprint() const {
  const ::Ssl_Fignerpint* p = identity_fingerprint_;
  // @@protoc_insertion_point(field_get:Transport_Description.identity_fingerprint)
  return p != nullptr ? *p : *reinterpret_cast<const ::Ssl_Fignerpint*>(
      &::_Ssl_Fignerpint_default_instance_);
}
inline ::Ssl_Fignerpint* Transport_Description::release_identity_fingerprint() {
  // @@protoc_insertion_point(field_release:Transport_Description.identity_fingerprint)
  _has_bits_[0] &= ~0x00000008u;
  ::Ssl_Fignerpint* temp = identity_fingerprint_;
  identity_fingerprint_ = nullptr;
  return temp;
}
inline ::Ssl_Fignerpint* Transport_Description::mutable_identity_fingerprint() {
  _has_bits_[0] |= 0x00000008u;
  if (identity_fingerprint_ == nullptr) {
    auto* p = CreateMaybeMessage<::Ssl_Fignerpint>(GetArenaNoVirtual());
    identity_fingerprint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Transport_Description.identity_fingerprint)
  return identity_fingerprint_;
}
inline void Transport_Description::set_allocated_identity_fingerprint(::Ssl_Fignerpint* identity_fingerprint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(identity_fingerprint_);
  }
  if (identity_fingerprint) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      identity_fingerprint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, identity_fingerprint, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  identity_fingerprint_ = identity_fingerprint;
  // @@protoc_insertion_point(field_set_allocated:Transport_Description.identity_fingerprint)
}

// -------------------------------------------------------------------

// Stream_Params

// optional string groupid = 1;
inline bool Stream_Params::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream_Params::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Stream_Params::groupid() const {
  // @@protoc_insertion_point(field_get:Stream_Params.groupid)
  return groupid_.GetNoArena();
}
inline void Stream_Params::set_groupid(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Stream_Params.groupid)
}
#if LANG_CXX11
inline void Stream_Params::set_groupid(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  groupid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Stream_Params.groupid)
}
#endif
inline void Stream_Params::set_groupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Stream_Params.groupid)
}
inline void Stream_Params::set_groupid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Stream_Params.groupid)
}
inline ::std::string* Stream_Params::mutable_groupid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Stream_Params.groupid)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream_Params::release_groupid() {
  // @@protoc_insertion_point(field_release:Stream_Params.groupid)
  if (!has_groupid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return groupid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream_Params::set_allocated_groupid(::std::string* groupid) {
  if (groupid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:Stream_Params.groupid)
}

// optional string id = 2;
inline bool Stream_Params::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stream_Params::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& Stream_Params::id() const {
  // @@protoc_insertion_point(field_get:Stream_Params.id)
  return id_.GetNoArena();
}
inline void Stream_Params::set_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Stream_Params.id)
}
#if LANG_CXX11
inline void Stream_Params::set_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Stream_Params.id)
}
#endif
inline void Stream_Params::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Stream_Params.id)
}
inline void Stream_Params::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Stream_Params.id)
}
inline ::std::string* Stream_Params::mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Stream_Params.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream_Params::release_id() {
  // @@protoc_insertion_point(field_release:Stream_Params.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream_Params::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Stream_Params.id)
}

// repeated uint32 ssrcs = 3;
inline int Stream_Params::ssrcs_size() const {
  return ssrcs_.size();
}
inline void Stream_Params::clear_ssrcs() {
  ssrcs_.Clear();
}
inline ::google::protobuf::uint32 Stream_Params::ssrcs(int index) const {
  // @@protoc_insertion_point(field_get:Stream_Params.ssrcs)
  return ssrcs_.Get(index);
}
inline void Stream_Params::set_ssrcs(int index, ::google::protobuf::uint32 value) {
  ssrcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:Stream_Params.ssrcs)
}
inline void Stream_Params::add_ssrcs(::google::protobuf::uint32 value) {
  ssrcs_.Add(value);
  // @@protoc_insertion_point(field_add:Stream_Params.ssrcs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Stream_Params::ssrcs() const {
  // @@protoc_insertion_point(field_list:Stream_Params.ssrcs)
  return ssrcs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Stream_Params::mutable_ssrcs() {
  // @@protoc_insertion_point(field_mutable_list:Stream_Params.ssrcs)
  return &ssrcs_;
}

// repeated .Ssrc_Group ssrc_groups = 4;
inline int Stream_Params::ssrc_groups_size() const {
  return ssrc_groups_.size();
}
inline ::Ssrc_Group* Stream_Params::mutable_ssrc_groups(int index) {
  // @@protoc_insertion_point(field_mutable:Stream_Params.ssrc_groups)
  return ssrc_groups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Ssrc_Group >*
Stream_Params::mutable_ssrc_groups() {
  // @@protoc_insertion_point(field_mutable_list:Stream_Params.ssrc_groups)
  return &ssrc_groups_;
}
inline const ::Ssrc_Group& Stream_Params::ssrc_groups(int index) const {
  // @@protoc_insertion_point(field_get:Stream_Params.ssrc_groups)
  return ssrc_groups_.Get(index);
}
inline ::Ssrc_Group* Stream_Params::add_ssrc_groups() {
  // @@protoc_insertion_point(field_add:Stream_Params.ssrc_groups)
  return ssrc_groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Ssrc_Group >&
Stream_Params::ssrc_groups() const {
  // @@protoc_insertion_point(field_list:Stream_Params.ssrc_groups)
  return ssrc_groups_;
}

// optional string cname = 5;
inline bool Stream_Params::has_cname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stream_Params::clear_cname() {
  cname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::std::string& Stream_Params::cname() const {
  // @@protoc_insertion_point(field_get:Stream_Params.cname)
  return cname_.GetNoArena();
}
inline void Stream_Params::set_cname(const ::std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Stream_Params.cname)
}
#if LANG_CXX11
inline void Stream_Params::set_cname(::std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Stream_Params.cname)
}
#endif
inline void Stream_Params::set_cname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Stream_Params.cname)
}
inline void Stream_Params::set_cname(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Stream_Params.cname)
}
inline ::std::string* Stream_Params::mutable_cname() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:Stream_Params.cname)
  return cname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream_Params::release_cname() {
  // @@protoc_insertion_point(field_release:Stream_Params.cname)
  if (!has_cname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream_Params::set_allocated_cname(::std::string* cname) {
  if (cname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cname);
  // @@protoc_insertion_point(field_set_allocated:Stream_Params.cname)
}

// repeated string stream_ids = 6;
inline int Stream_Params::stream_ids_size() const {
  return stream_ids_.size();
}
inline void Stream_Params::clear_stream_ids() {
  stream_ids_.Clear();
}
inline const ::std::string& Stream_Params::stream_ids(int index) const {
  // @@protoc_insertion_point(field_get:Stream_Params.stream_ids)
  return stream_ids_.Get(index);
}
inline ::std::string* Stream_Params::mutable_stream_ids(int index) {
  // @@protoc_insertion_point(field_mutable:Stream_Params.stream_ids)
  return stream_ids_.Mutable(index);
}
inline void Stream_Params::set_stream_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Stream_Params.stream_ids)
  stream_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Stream_Params::set_stream_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Stream_Params.stream_ids)
  stream_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Stream_Params::set_stream_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stream_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Stream_Params.stream_ids)
}
inline void Stream_Params::set_stream_ids(int index, const char* value, size_t size) {
  stream_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Stream_Params.stream_ids)
}
inline ::std::string* Stream_Params::add_stream_ids() {
  // @@protoc_insertion_point(field_add_mutable:Stream_Params.stream_ids)
  return stream_ids_.Add();
}
inline void Stream_Params::add_stream_ids(const ::std::string& value) {
  stream_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Stream_Params.stream_ids)
}
#if LANG_CXX11
inline void Stream_Params::add_stream_ids(::std::string&& value) {
  stream_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Stream_Params.stream_ids)
}
#endif
inline void Stream_Params::add_stream_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stream_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Stream_Params.stream_ids)
}
inline void Stream_Params::add_stream_ids(const char* value, size_t size) {
  stream_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Stream_Params.stream_ids)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Stream_Params::stream_ids() const {
  // @@protoc_insertion_point(field_list:Stream_Params.stream_ids)
  return stream_ids_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Stream_Params::mutable_stream_ids() {
  // @@protoc_insertion_point(field_mutable_list:Stream_Params.stream_ids)
  return &stream_ids_;
}

// repeated .Rid_Description rids = 7;
inline int Stream_Params::rids_size() const {
  return rids_.size();
}
inline ::Rid_Description* Stream_Params::mutable_rids(int index) {
  // @@protoc_insertion_point(field_mutable:Stream_Params.rids)
  return rids_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Rid_Description >*
Stream_Params::mutable_rids() {
  // @@protoc_insertion_point(field_mutable_list:Stream_Params.rids)
  return &rids_;
}
inline const ::Rid_Description& Stream_Params::rids(int index) const {
  // @@protoc_insertion_point(field_get:Stream_Params.rids)
  return rids_.Get(index);
}
inline ::Rid_Description* Stream_Params::add_rids() {
  // @@protoc_insertion_point(field_add:Stream_Params.rids)
  return rids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Rid_Description >&
Stream_Params::rids() const {
  // @@protoc_insertion_point(field_list:Stream_Params.rids)
  return rids_;
}

// -------------------------------------------------------------------

// Media_Content_Description

// optional bool rtcp_mux = 1;
inline bool Media_Content_Description::has_rtcp_mux() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Media_Content_Description::clear_rtcp_mux() {
  rtcp_mux_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Media_Content_Description::rtcp_mux() const {
  // @@protoc_insertion_point(field_get:Media_Content_Description.rtcp_mux)
  return rtcp_mux_;
}
inline void Media_Content_Description::set_rtcp_mux(bool value) {
  _has_bits_[0] |= 0x00000010u;
  rtcp_mux_ = value;
  // @@protoc_insertion_point(field_set:Media_Content_Description.rtcp_mux)
}

// optional bool rtcp_reduced_size = 2;
inline bool Media_Content_Description::has_rtcp_reduced_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Media_Content_Description::clear_rtcp_reduced_size() {
  rtcp_reduced_size_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Media_Content_Description::rtcp_reduced_size() const {
  // @@protoc_insertion_point(field_get:Media_Content_Description.rtcp_reduced_size)
  return rtcp_reduced_size_;
}
inline void Media_Content_Description::set_rtcp_reduced_size(bool value) {
  _has_bits_[0] |= 0x00000020u;
  rtcp_reduced_size_ = value;
  // @@protoc_insertion_point(field_set:Media_Content_Description.rtcp_reduced_size)
}

// optional int32 bandwidth = 3;
inline bool Media_Content_Description::has_bandwidth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Media_Content_Description::clear_bandwidth() {
  bandwidth_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int32 Media_Content_Description::bandwidth() const {
  // @@protoc_insertion_point(field_get:Media_Content_Description.bandwidth)
  return bandwidth_;
}
inline void Media_Content_Description::set_bandwidth(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  bandwidth_ = value;
  // @@protoc_insertion_point(field_set:Media_Content_Description.bandwidth)
}

// optional string protocol = 4;
inline bool Media_Content_Description::has_protocol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Media_Content_Description::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Media_Content_Description::protocol() const {
  // @@protoc_insertion_point(field_get:Media_Content_Description.protocol)
  return protocol_.GetNoArena();
}
inline void Media_Content_Description::set_protocol(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Media_Content_Description.protocol)
}
#if LANG_CXX11
inline void Media_Content_Description::set_protocol(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Media_Content_Description.protocol)
}
#endif
inline void Media_Content_Description::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Media_Content_Description.protocol)
}
inline void Media_Content_Description::set_protocol(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Media_Content_Description.protocol)
}
inline ::std::string* Media_Content_Description::mutable_protocol() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Media_Content_Description.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Media_Content_Description::release_protocol() {
  // @@protoc_insertion_point(field_release:Media_Content_Description.protocol)
  if (!has_protocol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return protocol_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Media_Content_Description::set_allocated_protocol(::std::string* protocol) {
  if (protocol != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:Media_Content_Description.protocol)
}

// repeated .Crypto_Params cryptos = 5;
inline int Media_Content_Description::cryptos_size() const {
  return cryptos_.size();
}
inline ::Crypto_Params* Media_Content_Description::mutable_cryptos(int index) {
  // @@protoc_insertion_point(field_mutable:Media_Content_Description.cryptos)
  return cryptos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Crypto_Params >*
Media_Content_Description::mutable_cryptos() {
  // @@protoc_insertion_point(field_mutable_list:Media_Content_Description.cryptos)
  return &cryptos_;
}
inline const ::Crypto_Params& Media_Content_Description::cryptos(int index) const {
  // @@protoc_insertion_point(field_get:Media_Content_Description.cryptos)
  return cryptos_.Get(index);
}
inline ::Crypto_Params* Media_Content_Description::add_cryptos() {
  // @@protoc_insertion_point(field_add:Media_Content_Description.cryptos)
  return cryptos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Crypto_Params >&
Media_Content_Description::cryptos() const {
  // @@protoc_insertion_point(field_list:Media_Content_Description.cryptos)
  return cryptos_;
}

// repeated .Rtp_Extension rtp_header_extensions = 6;
inline int Media_Content_Description::rtp_header_extensions_size() const {
  return rtp_header_extensions_.size();
}
inline ::Rtp_Extension* Media_Content_Description::mutable_rtp_header_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:Media_Content_Description.rtp_header_extensions)
  return rtp_header_extensions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Rtp_Extension >*
Media_Content_Description::mutable_rtp_header_extensions() {
  // @@protoc_insertion_point(field_mutable_list:Media_Content_Description.rtp_header_extensions)
  return &rtp_header_extensions_;
}
inline const ::Rtp_Extension& Media_Content_Description::rtp_header_extensions(int index) const {
  // @@protoc_insertion_point(field_get:Media_Content_Description.rtp_header_extensions)
  return rtp_header_extensions_.Get(index);
}
inline ::Rtp_Extension* Media_Content_Description::add_rtp_header_extensions() {
  // @@protoc_insertion_point(field_add:Media_Content_Description.rtp_header_extensions)
  return rtp_header_extensions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Rtp_Extension >&
Media_Content_Description::rtp_header_extensions() const {
  // @@protoc_insertion_point(field_list:Media_Content_Description.rtp_header_extensions)
  return rtp_header_extensions_;
}

// optional bool rtp_header_extensions_set = 7;
inline bool Media_Content_Description::has_rtp_header_extensions_set() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Media_Content_Description::clear_rtp_header_extensions_set() {
  rtp_header_extensions_set_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool Media_Content_Description::rtp_header_extensions_set() const {
  // @@protoc_insertion_point(field_get:Media_Content_Description.rtp_header_extensions_set)
  return rtp_header_extensions_set_;
}
inline void Media_Content_Description::set_rtp_header_extensions_set(bool value) {
  _has_bits_[0] |= 0x00000040u;
  rtp_header_extensions_set_ = value;
  // @@protoc_insertion_point(field_set:Media_Content_Description.rtp_header_extensions_set)
}

// repeated .Stream_Params send_streams = 8;
inline int Media_Content_Description::send_streams_size() const {
  return send_streams_.size();
}
inline void Media_Content_Description::clear_send_streams() {
  send_streams_.Clear();
}
inline ::Stream_Params* Media_Content_Description::mutable_send_streams(int index) {
  // @@protoc_insertion_point(field_mutable:Media_Content_Description.send_streams)
  return send_streams_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Stream_Params >*
Media_Content_Description::mutable_send_streams() {
  // @@protoc_insertion_point(field_mutable_list:Media_Content_Description.send_streams)
  return &send_streams_;
}
inline const ::Stream_Params& Media_Content_Description::send_streams(int index) const {
  // @@protoc_insertion_point(field_get:Media_Content_Description.send_streams)
  return send_streams_.Get(index);
}
inline ::Stream_Params* Media_Content_Description::add_send_streams() {
  // @@protoc_insertion_point(field_add:Media_Content_Description.send_streams)
  return send_streams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Stream_Params >&
Media_Content_Description::send_streams() const {
  // @@protoc_insertion_point(field_list:Media_Content_Description.send_streams)
  return send_streams_;
}

// optional bool conference_mode = 9;
inline bool Media_Content_Description::has_conference_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Media_Content_Description::clear_conference_mode() {
  conference_mode_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool Media_Content_Description::conference_mode() const {
  // @@protoc_insertion_point(field_get:Media_Content_Description.conference_mode)
  return conference_mode_;
}
inline void Media_Content_Description::set_conference_mode(bool value) {
  _has_bits_[0] |= 0x00000080u;
  conference_mode_ = value;
  // @@protoc_insertion_point(field_set:Media_Content_Description.conference_mode)
}

// optional .Rtp_Transceiver_Direction direction = 10;
inline bool Media_Content_Description::has_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Media_Content_Description::clear_direction() {
  direction_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::Rtp_Transceiver_Direction Media_Content_Description::direction() const {
  // @@protoc_insertion_point(field_get:Media_Content_Description.direction)
  return static_cast< ::Rtp_Transceiver_Direction >(direction_);
}
inline void Media_Content_Description::set_direction(::Rtp_Transceiver_Direction value) {
  assert(::Rtp_Transceiver_Direction_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  direction_ = value;
  // @@protoc_insertion_point(field_set:Media_Content_Description.direction)
}

// optional .Socket_Address connection_address = 11;
inline bool Media_Content_Description::has_connection_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::Socket_Address& Media_Content_Description::connection_address() const {
  const ::Socket_Address* p = connection_address_;
  // @@protoc_insertion_point(field_get:Media_Content_Description.connection_address)
  return p != nullptr ? *p : *reinterpret_cast<const ::Socket_Address*>(
      &::_Socket_Address_default_instance_);
}
inline ::Socket_Address* Media_Content_Description::release_connection_address() {
  // @@protoc_insertion_point(field_release:Media_Content_Description.connection_address)
  _has_bits_[0] &= ~0x00000002u;
  ::Socket_Address* temp = connection_address_;
  connection_address_ = nullptr;
  return temp;
}
inline ::Socket_Address* Media_Content_Description::mutable_connection_address() {
  _has_bits_[0] |= 0x00000002u;
  if (connection_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::Socket_Address>(GetArenaNoVirtual());
    connection_address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Media_Content_Description.connection_address)
  return connection_address_;
}
inline void Media_Content_Description::set_allocated_connection_address(::Socket_Address* connection_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(connection_address_);
  }
  if (connection_address) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connection_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, connection_address, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  connection_address_ = connection_address;
  // @@protoc_insertion_point(field_set_allocated:Media_Content_Description.connection_address)
}

// optional .Extmap_Allow_Mixed extmap_allow_mixed_enum = 12;
inline bool Media_Content_Description::has_extmap_allow_mixed_enum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Media_Content_Description::clear_extmap_allow_mixed_enum() {
  extmap_allow_mixed_enum_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::Extmap_Allow_Mixed Media_Content_Description::extmap_allow_mixed_enum() const {
  // @@protoc_insertion_point(field_get:Media_Content_Description.extmap_allow_mixed_enum)
  return static_cast< ::Extmap_Allow_Mixed >(extmap_allow_mixed_enum_);
}
inline void Media_Content_Description::set_extmap_allow_mixed_enum(::Extmap_Allow_Mixed value) {
  assert(::Extmap_Allow_Mixed_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  extmap_allow_mixed_enum_ = value;
  // @@protoc_insertion_point(field_set:Media_Content_Description.extmap_allow_mixed_enum)
}

// optional .Simulcast_Description simulcast = 13;
inline bool Media_Content_Description::has_simulcast() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::Simulcast_Description& Media_Content_Description::simulcast() const {
  const ::Simulcast_Description* p = simulcast_;
  // @@protoc_insertion_point(field_get:Media_Content_Description.simulcast)
  return p != nullptr ? *p : *reinterpret_cast<const ::Simulcast_Description*>(
      &::_Simulcast_Description_default_instance_);
}
inline ::Simulcast_Description* Media_Content_Description::release_simulcast() {
  // @@protoc_insertion_point(field_release:Media_Content_Description.simulcast)
  _has_bits_[0] &= ~0x00000004u;
  ::Simulcast_Description* temp = simulcast_;
  simulcast_ = nullptr;
  return temp;
}
inline ::Simulcast_Description* Media_Content_Description::mutable_simulcast() {
  _has_bits_[0] |= 0x00000004u;
  if (simulcast_ == nullptr) {
    auto* p = CreateMaybeMessage<::Simulcast_Description>(GetArenaNoVirtual());
    simulcast_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Media_Content_Description.simulcast)
  return simulcast_;
}
inline void Media_Content_Description::set_allocated_simulcast(::Simulcast_Description* simulcast) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(simulcast_);
  }
  if (simulcast) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simulcast = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, simulcast, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  simulcast_ = simulcast;
  // @@protoc_insertion_point(field_set_allocated:Media_Content_Description.simulcast)
}

// -------------------------------------------------------------------

// Content_Info

// optional string name = 1;
inline bool Content_Info::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Content_Info::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Content_Info::name() const {
  // @@protoc_insertion_point(field_get:Content_Info.name)
  return name_.GetNoArena();
}
inline void Content_Info::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Content_Info.name)
}
#if LANG_CXX11
inline void Content_Info::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Content_Info.name)
}
#endif
inline void Content_Info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Content_Info.name)
}
inline void Content_Info::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Content_Info.name)
}
inline ::std::string* Content_Info::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Content_Info.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Content_Info::release_name() {
  // @@protoc_insertion_point(field_release:Content_Info.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Content_Info::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Content_Info.name)
}

// optional .Media_Protocol_Type type = 2;
inline bool Content_Info::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Content_Info::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Media_Protocol_Type Content_Info::type() const {
  // @@protoc_insertion_point(field_get:Content_Info.type)
  return static_cast< ::Media_Protocol_Type >(type_);
}
inline void Content_Info::set_type(::Media_Protocol_Type value) {
  assert(::Media_Protocol_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:Content_Info.type)
}

// optional bool rejected = 3;
inline bool Content_Info::has_rejected() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Content_Info::clear_rejected() {
  rejected_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Content_Info::rejected() const {
  // @@protoc_insertion_point(field_get:Content_Info.rejected)
  return rejected_;
}
inline void Content_Info::set_rejected(bool value) {
  _has_bits_[0] |= 0x00000008u;
  rejected_ = value;
  // @@protoc_insertion_point(field_set:Content_Info.rejected)
}

// optional bool bundle_only = 4;
inline bool Content_Info::has_bundle_only() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Content_Info::clear_bundle_only() {
  bundle_only_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool Content_Info::bundle_only() const {
  // @@protoc_insertion_point(field_get:Content_Info.bundle_only)
  return bundle_only_;
}
inline void Content_Info::set_bundle_only(bool value) {
  _has_bits_[0] |= 0x00000010u;
  bundle_only_ = value;
  // @@protoc_insertion_point(field_set:Content_Info.bundle_only)
}

// optional .Media_Content_Description description = 5;
inline bool Content_Info::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Content_Info::clear_description() {
  if (description_ != nullptr) description_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Media_Content_Description& Content_Info::description() const {
  const ::Media_Content_Description* p = description_;
  // @@protoc_insertion_point(field_get:Content_Info.description)
  return p != nullptr ? *p : *reinterpret_cast<const ::Media_Content_Description*>(
      &::_Media_Content_Description_default_instance_);
}
inline ::Media_Content_Description* Content_Info::release_description() {
  // @@protoc_insertion_point(field_release:Content_Info.description)
  _has_bits_[0] &= ~0x00000002u;
  ::Media_Content_Description* temp = description_;
  description_ = nullptr;
  return temp;
}
inline ::Media_Content_Description* Content_Info::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<::Media_Content_Description>(GetArenaNoVirtual());
    description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Content_Info.description)
  return description_;
}
inline void Content_Info::set_allocated_description(::Media_Content_Description* description) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete description_;
  }
  if (description) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      description = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:Content_Info.description)
}

// -------------------------------------------------------------------

// Content_Group

// optional string semantics = 1;
inline bool Content_Group::has_semantics() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Content_Group::clear_semantics() {
  semantics_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Content_Group::semantics() const {
  // @@protoc_insertion_point(field_get:Content_Group.semantics)
  return semantics_.GetNoArena();
}
inline void Content_Group::set_semantics(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  semantics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Content_Group.semantics)
}
#if LANG_CXX11
inline void Content_Group::set_semantics(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  semantics_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Content_Group.semantics)
}
#endif
inline void Content_Group::set_semantics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  semantics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Content_Group.semantics)
}
inline void Content_Group::set_semantics(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  semantics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Content_Group.semantics)
}
inline ::std::string* Content_Group::mutable_semantics() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Content_Group.semantics)
  return semantics_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Content_Group::release_semantics() {
  // @@protoc_insertion_point(field_release:Content_Group.semantics)
  if (!has_semantics()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return semantics_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Content_Group::set_allocated_semantics(::std::string* semantics) {
  if (semantics != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  semantics_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), semantics);
  // @@protoc_insertion_point(field_set_allocated:Content_Group.semantics)
}

// repeated string content_names = 2;
inline int Content_Group::content_names_size() const {
  return content_names_.size();
}
inline void Content_Group::clear_content_names() {
  content_names_.Clear();
}
inline const ::std::string& Content_Group::content_names(int index) const {
  // @@protoc_insertion_point(field_get:Content_Group.content_names)
  return content_names_.Get(index);
}
inline ::std::string* Content_Group::mutable_content_names(int index) {
  // @@protoc_insertion_point(field_mutable:Content_Group.content_names)
  return content_names_.Mutable(index);
}
inline void Content_Group::set_content_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Content_Group.content_names)
  content_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Content_Group::set_content_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Content_Group.content_names)
  content_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Content_Group::set_content_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Content_Group.content_names)
}
inline void Content_Group::set_content_names(int index, const char* value, size_t size) {
  content_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Content_Group.content_names)
}
inline ::std::string* Content_Group::add_content_names() {
  // @@protoc_insertion_point(field_add_mutable:Content_Group.content_names)
  return content_names_.Add();
}
inline void Content_Group::add_content_names(const ::std::string& value) {
  content_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Content_Group.content_names)
}
#if LANG_CXX11
inline void Content_Group::add_content_names(::std::string&& value) {
  content_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Content_Group.content_names)
}
#endif
inline void Content_Group::add_content_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Content_Group.content_names)
}
inline void Content_Group::add_content_names(const char* value, size_t size) {
  content_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Content_Group.content_names)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Content_Group::content_names() const {
  // @@protoc_insertion_point(field_list:Content_Group.content_names)
  return content_names_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Content_Group::mutable_content_names() {
  // @@protoc_insertion_point(field_mutable_list:Content_Group.content_names)
  return &content_names_;
}

// -------------------------------------------------------------------

// Media_Transport_Setting

// optional string transport_name = 1;
inline bool Media_Transport_Setting::has_transport_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Media_Transport_Setting::clear_transport_name() {
  transport_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& Media_Transport_Setting::transport_name() const {
  // @@protoc_insertion_point(field_get:Media_Transport_Setting.transport_name)
  return transport_name_.GetNoArena();
}
inline void Media_Transport_Setting::set_transport_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  transport_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Media_Transport_Setting.transport_name)
}
#if LANG_CXX11
inline void Media_Transport_Setting::set_transport_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  transport_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Media_Transport_Setting.transport_name)
}
#endif
inline void Media_Transport_Setting::set_transport_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  transport_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Media_Transport_Setting.transport_name)
}
inline void Media_Transport_Setting::set_transport_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  transport_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Media_Transport_Setting.transport_name)
}
inline ::std::string* Media_Transport_Setting::mutable_transport_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Media_Transport_Setting.transport_name)
  return transport_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Media_Transport_Setting::release_transport_name() {
  // @@protoc_insertion_point(field_release:Media_Transport_Setting.transport_name)
  if (!has_transport_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return transport_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Media_Transport_Setting::set_allocated_transport_name(::std::string* transport_name) {
  if (transport_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  transport_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transport_name);
  // @@protoc_insertion_point(field_set_allocated:Media_Transport_Setting.transport_name)
}

// optional string transport_setting = 2;
inline bool Media_Transport_Setting::has_transport_setting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Media_Transport_Setting::clear_transport_setting() {
  transport_setting_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& Media_Transport_Setting::transport_setting() const {
  // @@protoc_insertion_point(field_get:Media_Transport_Setting.transport_setting)
  return transport_setting_.GetNoArena();
}
inline void Media_Transport_Setting::set_transport_setting(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  transport_setting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Media_Transport_Setting.transport_setting)
}
#if LANG_CXX11
inline void Media_Transport_Setting::set_transport_setting(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  transport_setting_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Media_Transport_Setting.transport_setting)
}
#endif
inline void Media_Transport_Setting::set_transport_setting(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  transport_setting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Media_Transport_Setting.transport_setting)
}
inline void Media_Transport_Setting::set_transport_setting(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  transport_setting_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Media_Transport_Setting.transport_setting)
}
inline ::std::string* Media_Transport_Setting::mutable_transport_setting() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Media_Transport_Setting.transport_setting)
  return transport_setting_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Media_Transport_Setting::release_transport_setting() {
  // @@protoc_insertion_point(field_release:Media_Transport_Setting.transport_setting)
  if (!has_transport_setting()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return transport_setting_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Media_Transport_Setting::set_allocated_transport_setting(::std::string* transport_setting) {
  if (transport_setting != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  transport_setting_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transport_setting);
  // @@protoc_insertion_point(field_set_allocated:Media_Transport_Setting.transport_setting)
}

// -------------------------------------------------------------------

// Session_Description

// repeated .Content_Info contents = 1;
inline int Session_Description::contents_size() const {
  return contents_.size();
}
inline void Session_Description::clear_contents() {
  contents_.Clear();
}
inline ::Content_Info* Session_Description::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:Session_Description.contents)
  return contents_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Content_Info >*
Session_Description::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:Session_Description.contents)
  return &contents_;
}
inline const ::Content_Info& Session_Description::contents(int index) const {
  // @@protoc_insertion_point(field_get:Session_Description.contents)
  return contents_.Get(index);
}
inline ::Content_Info* Session_Description::add_contents() {
  // @@protoc_insertion_point(field_add:Session_Description.contents)
  return contents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Content_Info >&
Session_Description::contents() const {
  // @@protoc_insertion_point(field_list:Session_Description.contents)
  return contents_;
}

// repeated .Transport_Description transport_infos = 2;
inline int Session_Description::transport_infos_size() const {
  return transport_infos_.size();
}
inline void Session_Description::clear_transport_infos() {
  transport_infos_.Clear();
}
inline ::Transport_Description* Session_Description::mutable_transport_infos(int index) {
  // @@protoc_insertion_point(field_mutable:Session_Description.transport_infos)
  return transport_infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Transport_Description >*
Session_Description::mutable_transport_infos() {
  // @@protoc_insertion_point(field_mutable_list:Session_Description.transport_infos)
  return &transport_infos_;
}
inline const ::Transport_Description& Session_Description::transport_infos(int index) const {
  // @@protoc_insertion_point(field_get:Session_Description.transport_infos)
  return transport_infos_.Get(index);
}
inline ::Transport_Description* Session_Description::add_transport_infos() {
  // @@protoc_insertion_point(field_add:Session_Description.transport_infos)
  return transport_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Transport_Description >&
Session_Description::transport_infos() const {
  // @@protoc_insertion_point(field_list:Session_Description.transport_infos)
  return transport_infos_;
}

// repeated .Content_Group content_groups = 3;
inline int Session_Description::content_groups_size() const {
  return content_groups_.size();
}
inline void Session_Description::clear_content_groups() {
  content_groups_.Clear();
}
inline ::Content_Group* Session_Description::mutable_content_groups(int index) {
  // @@protoc_insertion_point(field_mutable:Session_Description.content_groups)
  return content_groups_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Content_Group >*
Session_Description::mutable_content_groups() {
  // @@protoc_insertion_point(field_mutable_list:Session_Description.content_groups)
  return &content_groups_;
}
inline const ::Content_Group& Session_Description::content_groups(int index) const {
  // @@protoc_insertion_point(field_get:Session_Description.content_groups)
  return content_groups_.Get(index);
}
inline ::Content_Group* Session_Description::add_content_groups() {
  // @@protoc_insertion_point(field_add:Session_Description.content_groups)
  return content_groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Content_Group >&
Session_Description::content_groups() const {
  // @@protoc_insertion_point(field_list:Session_Description.content_groups)
  return content_groups_;
}

// optional bool msid_supported = 4;
inline bool Session_Description::has_msid_supported() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Session_Description::clear_msid_supported() {
  msid_supported_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool Session_Description::msid_supported() const {
  // @@protoc_insertion_point(field_get:Session_Description.msid_supported)
  return msid_supported_;
}
inline void Session_Description::set_msid_supported(bool value) {
  _has_bits_[0] |= 0x00000002u;
  msid_supported_ = value;
  // @@protoc_insertion_point(field_set:Session_Description.msid_supported)
}

// optional int32 msid_signaling = 5;
inline bool Session_Description::has_msid_signaling() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Session_Description::clear_msid_signaling() {
  msid_signaling_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 Session_Description::msid_signaling() const {
  // @@protoc_insertion_point(field_get:Session_Description.msid_signaling)
  return msid_signaling_;
}
inline void Session_Description::set_msid_signaling(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  msid_signaling_ = value;
  // @@protoc_insertion_point(field_set:Session_Description.msid_signaling)
}

// optional bool extmap_allow_mixed = 6;
inline bool Session_Description::has_extmap_allow_mixed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Session_Description::clear_extmap_allow_mixed() {
  extmap_allow_mixed_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Session_Description::extmap_allow_mixed() const {
  // @@protoc_insertion_point(field_get:Session_Description.extmap_allow_mixed)
  return extmap_allow_mixed_;
}
inline void Session_Description::set_extmap_allow_mixed(bool value) {
  _has_bits_[0] |= 0x00000004u;
  extmap_allow_mixed_ = value;
  // @@protoc_insertion_point(field_set:Session_Description.extmap_allow_mixed)
}

// repeated .Media_Transport_Setting media_transport_settings = 7;
inline int Session_Description::media_transport_settings_size() const {
  return media_transport_settings_.size();
}
inline void Session_Description::clear_media_transport_settings() {
  media_transport_settings_.Clear();
}
inline ::Media_Transport_Setting* Session_Description::mutable_media_transport_settings(int index) {
  // @@protoc_insertion_point(field_mutable:Session_Description.media_transport_settings)
  return media_transport_settings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Media_Transport_Setting >*
Session_Description::mutable_media_transport_settings() {
  // @@protoc_insertion_point(field_mutable_list:Session_Description.media_transport_settings)
  return &media_transport_settings_;
}
inline const ::Media_Transport_Setting& Session_Description::media_transport_settings(int index) const {
  // @@protoc_insertion_point(field_get:Session_Description.media_transport_settings)
  return media_transport_settings_.Get(index);
}
inline ::Media_Transport_Setting* Session_Description::add_media_transport_settings() {
  // @@protoc_insertion_point(field_add:Session_Description.media_transport_settings)
  return media_transport_settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Media_Transport_Setting >&
Session_Description::media_transport_settings() const {
  // @@protoc_insertion_point(field_list:Session_Description.media_transport_settings)
  return media_transport_settings_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_RtcSdp_2eproto

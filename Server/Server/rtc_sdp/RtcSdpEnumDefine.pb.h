// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RtcSdpEnumDefine.proto

#ifndef PROTOBUF_INCLUDED_RtcSdpEnumDefine_2eproto
#define PROTOBUF_INCLUDED_RtcSdpEnumDefine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RtcSdpEnumDefine_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_RtcSdpEnumDefine_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum Ice_Mode {
  ICEMODE_FULL = 0,
  ICEMODE_LITE = 1
};
bool Ice_Mode_IsValid(int value);
const Ice_Mode Ice_Mode_MIN = ICEMODE_FULL;
const Ice_Mode Ice_Mode_MAX = ICEMODE_LITE;
const int Ice_Mode_ARRAYSIZE = Ice_Mode_MAX + 1;

enum Connection_Role {
  CONNECTIONROLE_NONE = 0,
  CONNECTIONROLE_ACTIVE = 1,
  CONNECTIONROLE_PASSIVE = 2,
  CONNECTIONROLE_ACTPASS = 3,
  CONNECTIONROLE_HOLDCONN = 4
};
bool Connection_Role_IsValid(int value);
const Connection_Role Connection_Role_MIN = CONNECTIONROLE_NONE;
const Connection_Role Connection_Role_MAX = CONNECTIONROLE_HOLDCONN;
const int Connection_Role_ARRAYSIZE = Connection_Role_MAX + 1;

enum Rid_Direction {
  kSend = 0,
  kReceive = 1
};
bool Rid_Direction_IsValid(int value);
const Rid_Direction Rid_Direction_MIN = kSend;
const Rid_Direction Rid_Direction_MAX = kReceive;
const int Rid_Direction_ARRAYSIZE = Rid_Direction_MAX + 1;

enum Rtp_Transceiver_Direction {
  kSendRecv = 0,
  kSendOnly = 1,
  kRecvOnly = 2,
  kInactive = 3
};
bool Rtp_Transceiver_Direction_IsValid(int value);
const Rtp_Transceiver_Direction Rtp_Transceiver_Direction_MIN = kSendRecv;
const Rtp_Transceiver_Direction Rtp_Transceiver_Direction_MAX = kInactive;
const int Rtp_Transceiver_Direction_ARRAYSIZE = Rtp_Transceiver_Direction_MAX + 1;

enum Extmap_Allow_Mixed {
  kNo = 0,
  kSession = 1,
  kMedia = 2
};
bool Extmap_Allow_Mixed_IsValid(int value);
const Extmap_Allow_Mixed Extmap_Allow_Mixed_MIN = kNo;
const Extmap_Allow_Mixed Extmap_Allow_Mixed_MAX = kMedia;
const int Extmap_Allow_Mixed_ARRAYSIZE = Extmap_Allow_Mixed_MAX + 1;

enum Media_Protocol_Type {
  kRtp = 0,
  kSctp = 1
};
bool Media_Protocol_Type_IsValid(int value);
const Media_Protocol_Type Media_Protocol_Type_MIN = kRtp;
const Media_Protocol_Type Media_Protocol_Type_MAX = kSctp;
const int Media_Protocol_Type_ARRAYSIZE = Media_Protocol_Type_MAX + 1;

enum Msid_Signaling {
  kMsidSignalingMediaSection = 1,
  kMsidSignalingSsrcAttribute = 2
};
bool Msid_Signaling_IsValid(int value);
const Msid_Signaling Msid_Signaling_MIN = kMsidSignalingMediaSection;
const Msid_Signaling Msid_Signaling_MAX = kMsidSignalingSsrcAttribute;
const int Msid_Signaling_ARRAYSIZE = Msid_Signaling_MAX + 1;

// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Ice_Mode> : ::std::true_type {};
template <> struct is_proto_enum< ::Connection_Role> : ::std::true_type {};
template <> struct is_proto_enum< ::Rid_Direction> : ::std::true_type {};
template <> struct is_proto_enum< ::Rtp_Transceiver_Direction> : ::std::true_type {};
template <> struct is_proto_enum< ::Extmap_Allow_Mixed> : ::std::true_type {};
template <> struct is_proto_enum< ::Media_Protocol_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::Msid_Signaling> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_RtcSdpEnumDefine_2eproto

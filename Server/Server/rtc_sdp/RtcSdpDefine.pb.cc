// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RtcSdpDefine.proto

#include "RtcSdpDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rid_Description_RestrictionsEntry_DoNotUse_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rtc_Codec_ParamsEntry_DoNotUse_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rtc_Feedback_Param_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Simulcast_Layer_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Socket_Address_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Simulcast_Layer_List_RtcSdpDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RtcSdpDefine_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Rtc_Codec_RtcSdpDefine_2eproto;
class Ssl_FignerpintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssl_Fignerpint> _instance;
} _Ssl_Fignerpint_default_instance_;
class Crypto_ParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Crypto_Params> _instance;
} _Crypto_Params_default_instance_;
class Rtp_ExtensionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rtp_Extension> _instance;
} _Rtp_Extension_default_instance_;
class Ssrc_GroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ssrc_Group> _instance;
} _Ssrc_Group_default_instance_;
class Rid_Description_RestrictionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rid_Description_RestrictionsEntry_DoNotUse> _instance;
} _Rid_Description_RestrictionsEntry_DoNotUse_default_instance_;
class Rid_DescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rid_Description> _instance;
} _Rid_Description_default_instance_;
class Socket_AddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Socket_Address> _instance;
} _Socket_Address_default_instance_;
class Simulcast_LayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Simulcast_Layer> _instance;
} _Simulcast_Layer_default_instance_;
class Simulcast_Layer_ListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Simulcast_Layer_List> _instance;
} _Simulcast_Layer_List_default_instance_;
class Simulcast_DescriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Simulcast_Description> _instance;
} _Simulcast_Description_default_instance_;
class RTC_CandidateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RTC_Candidate> _instance;
} _RTC_Candidate_default_instance_;
class Rtc_Ssrc_InfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rtc_Ssrc_Info> _instance;
} _Rtc_Ssrc_Info_default_instance_;
class Rtc_Feedback_ParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rtc_Feedback_Param> _instance;
} _Rtc_Feedback_Param_default_instance_;
class Rtc_Codec_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rtc_Codec_ParamsEntry_DoNotUse> _instance;
} _Rtc_Codec_ParamsEntry_DoNotUse_default_instance_;
class Rtc_CodecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rtc_Codec> _instance;
} _Rtc_Codec_default_instance_;
class Rtc_Audio_CodecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rtc_Audio_Codec> _instance;
} _Rtc_Audio_Codec_default_instance_;
class Rtc_Video_CodecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rtc_Video_Codec> _instance;
} _Rtc_Video_Codec_default_instance_;
class Rtc_Data_CodecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rtc_Data_Codec> _instance;
} _Rtc_Data_Codec_default_instance_;
class Rtc_CandidateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rtc_Candidate> _instance;
} _Rtc_Candidate_default_instance_;
static void InitDefaultsSsl_Fignerpint_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Ssl_Fignerpint_default_instance_;
    new (ptr) ::Ssl_Fignerpint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Ssl_Fignerpint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ssl_Fignerpint_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSsl_Fignerpint_RtcSdpDefine_2eproto}, {}};

static void InitDefaultsCrypto_Params_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Crypto_Params_default_instance_;
    new (ptr) ::Crypto_Params();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Crypto_Params::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Crypto_Params_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCrypto_Params_RtcSdpDefine_2eproto}, {}};

static void InitDefaultsRtp_Extension_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rtp_Extension_default_instance_;
    new (ptr) ::Rtp_Extension();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rtp_Extension::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rtp_Extension_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRtp_Extension_RtcSdpDefine_2eproto}, {}};

static void InitDefaultsSsrc_Group_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Ssrc_Group_default_instance_;
    new (ptr) ::Ssrc_Group();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Ssrc_Group::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ssrc_Group_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSsrc_Group_RtcSdpDefine_2eproto}, {}};

static void InitDefaultsRid_Description_RestrictionsEntry_DoNotUse_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rid_Description_RestrictionsEntry_DoNotUse_default_instance_;
    new (ptr) ::Rid_Description_RestrictionsEntry_DoNotUse();
  }
  ::Rid_Description_RestrictionsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rid_Description_RestrictionsEntry_DoNotUse_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRid_Description_RestrictionsEntry_DoNotUse_RtcSdpDefine_2eproto}, {}};

static void InitDefaultsRid_Description_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rid_Description_default_instance_;
    new (ptr) ::Rid_Description();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rid_Description::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rid_Description_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRid_Description_RtcSdpDefine_2eproto}, {
      &scc_info_Rid_Description_RestrictionsEntry_DoNotUse_RtcSdpDefine_2eproto.base,}};

static void InitDefaultsSocket_Address_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Socket_Address_default_instance_;
    new (ptr) ::Socket_Address();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Socket_Address::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Socket_Address_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSocket_Address_RtcSdpDefine_2eproto}, {}};

static void InitDefaultsSimulcast_Layer_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Simulcast_Layer_default_instance_;
    new (ptr) ::Simulcast_Layer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Simulcast_Layer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Simulcast_Layer_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSimulcast_Layer_RtcSdpDefine_2eproto}, {}};

static void InitDefaultsSimulcast_Layer_List_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Simulcast_Layer_List_default_instance_;
    new (ptr) ::Simulcast_Layer_List();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Simulcast_Layer_List::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Simulcast_Layer_List_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSimulcast_Layer_List_RtcSdpDefine_2eproto}, {
      &scc_info_Simulcast_Layer_RtcSdpDefine_2eproto.base,}};

static void InitDefaultsSimulcast_Description_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Simulcast_Description_default_instance_;
    new (ptr) ::Simulcast_Description();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Simulcast_Description::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Simulcast_Description_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSimulcast_Description_RtcSdpDefine_2eproto}, {
      &scc_info_Simulcast_Layer_List_RtcSdpDefine_2eproto.base,}};

static void InitDefaultsRTC_Candidate_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RTC_Candidate_default_instance_;
    new (ptr) ::RTC_Candidate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RTC_Candidate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RTC_Candidate_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRTC_Candidate_RtcSdpDefine_2eproto}, {}};

static void InitDefaultsRtc_Ssrc_Info_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rtc_Ssrc_Info_default_instance_;
    new (ptr) ::Rtc_Ssrc_Info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rtc_Ssrc_Info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rtc_Ssrc_Info_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRtc_Ssrc_Info_RtcSdpDefine_2eproto}, {}};

static void InitDefaultsRtc_Feedback_Param_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rtc_Feedback_Param_default_instance_;
    new (ptr) ::Rtc_Feedback_Param();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rtc_Feedback_Param::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rtc_Feedback_Param_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRtc_Feedback_Param_RtcSdpDefine_2eproto}, {}};

static void InitDefaultsRtc_Codec_ParamsEntry_DoNotUse_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rtc_Codec_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::Rtc_Codec_ParamsEntry_DoNotUse();
  }
  ::Rtc_Codec_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rtc_Codec_ParamsEntry_DoNotUse_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRtc_Codec_ParamsEntry_DoNotUse_RtcSdpDefine_2eproto}, {}};

static void InitDefaultsRtc_Codec_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rtc_Codec_default_instance_;
    new (ptr) ::Rtc_Codec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rtc_Codec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Rtc_Codec_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRtc_Codec_RtcSdpDefine_2eproto}, {
      &scc_info_Rtc_Codec_ParamsEntry_DoNotUse_RtcSdpDefine_2eproto.base,
      &scc_info_Rtc_Feedback_Param_RtcSdpDefine_2eproto.base,}};

static void InitDefaultsRtc_Audio_Codec_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rtc_Audio_Codec_default_instance_;
    new (ptr) ::Rtc_Audio_Codec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rtc_Audio_Codec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rtc_Audio_Codec_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRtc_Audio_Codec_RtcSdpDefine_2eproto}, {
      &scc_info_Rtc_Codec_RtcSdpDefine_2eproto.base,}};

static void InitDefaultsRtc_Video_Codec_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rtc_Video_Codec_default_instance_;
    new (ptr) ::Rtc_Video_Codec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rtc_Video_Codec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rtc_Video_Codec_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRtc_Video_Codec_RtcSdpDefine_2eproto}, {
      &scc_info_Rtc_Codec_RtcSdpDefine_2eproto.base,}};

static void InitDefaultsRtc_Data_Codec_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rtc_Data_Codec_default_instance_;
    new (ptr) ::Rtc_Data_Codec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rtc_Data_Codec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rtc_Data_Codec_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRtc_Data_Codec_RtcSdpDefine_2eproto}, {
      &scc_info_Rtc_Codec_RtcSdpDefine_2eproto.base,}};

static void InitDefaultsRtc_Candidate_RtcSdpDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rtc_Candidate_default_instance_;
    new (ptr) ::Rtc_Candidate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rtc_Candidate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rtc_Candidate_RtcSdpDefine_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRtc_Candidate_RtcSdpDefine_2eproto}, {
      &scc_info_Socket_Address_RtcSdpDefine_2eproto.base,}};


// ===================================================================

void Ssl_Fignerpint::InitAsDefaultInstance() {
}
class Ssl_Fignerpint::HasBitSetters {
 public:
  static void set_has_algorithm(Ssl_Fignerpint* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_digest(Ssl_Fignerpint* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssl_Fignerpint::kAlgorithmFieldNumber;
const int Ssl_Fignerpint::kDigestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssl_Fignerpint::Ssl_Fignerpint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ssl_Fignerpint)
}
Ssl_Fignerpint::Ssl_Fignerpint(const Ssl_Fignerpint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  algorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_algorithm()) {
    algorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algorithm_);
  }
  digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_digest()) {
    digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digest_);
  }
  // @@protoc_insertion_point(copy_constructor:Ssl_Fignerpint)
}

void Ssl_Fignerpint::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Ssl_Fignerpint_RtcSdpDefine_2eproto.base);
  algorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Ssl_Fignerpint::~Ssl_Fignerpint() {
  // @@protoc_insertion_point(destructor:Ssl_Fignerpint)
  SharedDtor();
}

void Ssl_Fignerpint::SharedDtor() {
  algorithm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Ssl_Fignerpint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ssl_Fignerpint& Ssl_Fignerpint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Ssl_Fignerpint_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Ssl_Fignerpint::Clear() {
// @@protoc_insertion_point(message_clear_start:Ssl_Fignerpint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      algorithm_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      digest_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Ssl_Fignerpint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Ssl_Fignerpint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string algorithm = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_algorithm();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string digest = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_digest();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Ssl_Fignerpint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Ssl_Fignerpint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string algorithm = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string digest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ssl_Fignerpint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ssl_Fignerpint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Ssl_Fignerpint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ssl_Fignerpint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string algorithm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->algorithm(), output);
  }

  // optional string digest = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->digest(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Ssl_Fignerpint)
}

size_t Ssl_Fignerpint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ssl_Fignerpint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string algorithm = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algorithm());
    }

    // optional string digest = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->digest());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ssl_Fignerpint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Ssl_Fignerpint*>(&from));
}

void Ssl_Fignerpint::MergeFrom(const Ssl_Fignerpint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ssl_Fignerpint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      algorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.algorithm_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      digest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.digest_);
    }
  }
}

void Ssl_Fignerpint::CopyFrom(const Ssl_Fignerpint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ssl_Fignerpint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssl_Fignerpint::IsInitialized() const {
  return true;
}

void Ssl_Fignerpint::Swap(Ssl_Fignerpint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssl_Fignerpint::InternalSwap(Ssl_Fignerpint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  algorithm_.Swap(&other->algorithm_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  digest_.Swap(&other->digest_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string Ssl_Fignerpint::GetTypeName() const {
  return "Ssl_Fignerpint";
}


// ===================================================================

void Crypto_Params::InitAsDefaultInstance() {
}
class Crypto_Params::HasBitSetters {
 public:
  static void set_has_tag(Crypto_Params* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_cipher_suite(Crypto_Params* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_key_params(Crypto_Params* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_session_params(Crypto_Params* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Crypto_Params::kTagFieldNumber;
const int Crypto_Params::kCipherSuiteFieldNumber;
const int Crypto_Params::kKeyParamsFieldNumber;
const int Crypto_Params::kSessionParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Crypto_Params::Crypto_Params()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Crypto_Params)
}
Crypto_Params::Crypto_Params(const Crypto_Params& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cipher_suite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cipher_suite()) {
    cipher_suite_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cipher_suite_);
  }
  key_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_params()) {
    key_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_params_);
  }
  session_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_params()) {
    session_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_params_);
  }
  tag_ = from.tag_;
  // @@protoc_insertion_point(copy_constructor:Crypto_Params)
}

void Crypto_Params::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Crypto_Params_RtcSdpDefine_2eproto.base);
  cipher_suite_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = 0;
}

Crypto_Params::~Crypto_Params() {
  // @@protoc_insertion_point(destructor:Crypto_Params)
  SharedDtor();
}

void Crypto_Params::SharedDtor() {
  cipher_suite_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Crypto_Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Crypto_Params& Crypto_Params::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Crypto_Params_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Crypto_Params::Clear() {
// @@protoc_insertion_point(message_clear_start:Crypto_Params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cipher_suite_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      key_params_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      session_params_.ClearNonDefaultToEmptyNoArena();
    }
  }
  tag_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Crypto_Params::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Crypto_Params*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 tag = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string cipher_suite = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cipher_suite();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string key_params = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_key_params();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string session_params = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_session_params();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Crypto_Params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Crypto_Params)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cipher_suite = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cipher_suite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key_params = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_params = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Crypto_Params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Crypto_Params)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Crypto_Params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Crypto_Params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tag = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag(), output);
  }

  // optional string cipher_suite = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cipher_suite(), output);
  }

  // optional string key_params = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key_params(), output);
  }

  // optional string session_params = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->session_params(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Crypto_Params)
}

size_t Crypto_Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Crypto_Params)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string cipher_suite = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cipher_suite());
    }

    // optional string key_params = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_params());
    }

    // optional string session_params = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_params());
    }

    // optional int32 tag = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Crypto_Params::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Crypto_Params*>(&from));
}

void Crypto_Params::MergeFrom(const Crypto_Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Crypto_Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cipher_suite_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cipher_suite_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      key_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_params_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      session_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_params_);
    }
    if (cached_has_bits & 0x00000008u) {
      tag_ = from.tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Crypto_Params::CopyFrom(const Crypto_Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Crypto_Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Crypto_Params::IsInitialized() const {
  return true;
}

void Crypto_Params::Swap(Crypto_Params* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Crypto_Params::InternalSwap(Crypto_Params* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cipher_suite_.Swap(&other->cipher_suite_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_params_.Swap(&other->key_params_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  session_params_.Swap(&other->session_params_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tag_, other->tag_);
}

::std::string Crypto_Params::GetTypeName() const {
  return "Crypto_Params";
}


// ===================================================================

void Rtp_Extension::InitAsDefaultInstance() {
}
class Rtp_Extension::HasBitSetters {
 public:
  static void set_has_uri(Rtp_Extension* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_id(Rtp_Extension* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_encrypt(Rtp_Extension* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rtp_Extension::kUriFieldNumber;
const int Rtp_Extension::kIdFieldNumber;
const int Rtp_Extension::kEncryptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rtp_Extension::Rtp_Extension()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rtp_Extension)
}
Rtp_Extension::Rtp_Extension(const Rtp_Extension& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_uri()) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&encrypt_) -
    reinterpret_cast<char*>(&id_)) + sizeof(encrypt_));
  // @@protoc_insertion_point(copy_constructor:Rtp_Extension)
}

void Rtp_Extension::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rtp_Extension_RtcSdpDefine_2eproto.base);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encrypt_) -
      reinterpret_cast<char*>(&id_)) + sizeof(encrypt_));
}

Rtp_Extension::~Rtp_Extension() {
  // @@protoc_insertion_point(destructor:Rtp_Extension)
  SharedDtor();
}

void Rtp_Extension::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rtp_Extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rtp_Extension& Rtp_Extension::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rtp_Extension_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Rtp_Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:Rtp_Extension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    uri_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encrypt_) -
        reinterpret_cast<char*>(&id_)) + sizeof(encrypt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rtp_Extension::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rtp_Extension*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string uri = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_uri();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool encrypt = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_encrypt(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rtp_Extension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Rtp_Extension)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_encrypt(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rtp_Extension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rtp_Extension)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rtp_Extension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rtp_Extension)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string uri = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional bool encrypt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->encrypt(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Rtp_Extension)
}

size_t Rtp_Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rtp_Extension)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string uri = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional int32 id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool encrypt = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rtp_Extension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rtp_Extension*>(&from));
}

void Rtp_Extension::MergeFrom(const Rtp_Extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rtp_Extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      encrypt_ = from.encrypt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rtp_Extension::CopyFrom(const Rtp_Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rtp_Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rtp_Extension::IsInitialized() const {
  return true;
}

void Rtp_Extension::Swap(Rtp_Extension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rtp_Extension::InternalSwap(Rtp_Extension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uri_.Swap(&other->uri_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(encrypt_, other->encrypt_);
}

::std::string Rtp_Extension::GetTypeName() const {
  return "Rtp_Extension";
}


// ===================================================================

void Ssrc_Group::InitAsDefaultInstance() {
}
class Ssrc_Group::HasBitSetters {
 public:
  static void set_has_semantics(Ssrc_Group* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ssrc_Group::kSemanticsFieldNumber;
const int Ssrc_Group::kSsrcsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ssrc_Group::Ssrc_Group()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Ssrc_Group)
}
Ssrc_Group::Ssrc_Group(const Ssrc_Group& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ssrcs_(from.ssrcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  semantics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_semantics()) {
    semantics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.semantics_);
  }
  // @@protoc_insertion_point(copy_constructor:Ssrc_Group)
}

void Ssrc_Group::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Ssrc_Group_RtcSdpDefine_2eproto.base);
  semantics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Ssrc_Group::~Ssrc_Group() {
  // @@protoc_insertion_point(destructor:Ssrc_Group)
  SharedDtor();
}

void Ssrc_Group::SharedDtor() {
  semantics_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Ssrc_Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ssrc_Group& Ssrc_Group::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Ssrc_Group_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Ssrc_Group::Clear() {
// @@protoc_insertion_point(message_clear_start:Ssrc_Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssrcs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    semantics_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Ssrc_Group::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Ssrc_Group*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string semantics = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_semantics();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 ssrcs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_ssrcs(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_ssrcs();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Ssrc_Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Ssrc_Group)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string semantics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_semantics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ssrcs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_ssrcs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ssrcs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Ssrc_Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Ssrc_Group)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Ssrc_Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Ssrc_Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string semantics = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->semantics(), output);
  }

  // repeated uint32 ssrcs = 2;
  for (int i = 0, n = this->ssrcs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ssrcs(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Ssrc_Group)
}

size_t Ssrc_Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ssrc_Group)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ssrcs = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ssrcs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ssrcs_size());
    total_size += data_size;
  }

  // optional string semantics = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->semantics());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ssrc_Group::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Ssrc_Group*>(&from));
}

void Ssrc_Group::MergeFrom(const Ssrc_Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ssrc_Group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ssrcs_.MergeFrom(from.ssrcs_);
  if (from.has_semantics()) {
    _has_bits_[0] |= 0x00000001u;
    semantics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.semantics_);
  }
}

void Ssrc_Group::CopyFrom(const Ssrc_Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ssrc_Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ssrc_Group::IsInitialized() const {
  return true;
}

void Ssrc_Group::Swap(Ssrc_Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ssrc_Group::InternalSwap(Ssrc_Group* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ssrcs_.InternalSwap(&other->ssrcs_);
  semantics_.Swap(&other->semantics_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string Ssrc_Group::GetTypeName() const {
  return "Ssrc_Group";
}


// ===================================================================

Rid_Description_RestrictionsEntry_DoNotUse::Rid_Description_RestrictionsEntry_DoNotUse() {}
Rid_Description_RestrictionsEntry_DoNotUse::Rid_Description_RestrictionsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Rid_Description_RestrictionsEntry_DoNotUse::MergeFrom(const Rid_Description_RestrictionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rid_Description_RestrictionsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapFieldLite<
      Rid_Description_RestrictionsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Rid_Description::InitAsDefaultInstance() {
}
class Rid_Description::HasBitSetters {
 public:
  static void set_has_rid(Rid_Description* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_direction(Rid_Description* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rid_Description::kRidFieldNumber;
const int Rid_Description::kDirectionFieldNumber;
const int Rid_Description::kPayloadTypesFieldNumber;
const int Rid_Description::kRestrictionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rid_Description::Rid_Description()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rid_Description)
}
Rid_Description::Rid_Description(const Rid_Description& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      payload_types_(from.payload_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  restrictions_.MergeFrom(from.restrictions_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rid()) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:Rid_Description)
}

void Rid_Description::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rid_Description_RtcSdpDefine_2eproto.base);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
}

Rid_Description::~Rid_Description() {
  // @@protoc_insertion_point(destructor:Rid_Description)
  SharedDtor();
}

void Rid_Description::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rid_Description::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rid_Description& Rid_Description::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rid_Description_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Rid_Description::Clear() {
// @@protoc_insertion_point(message_clear_start:Rid_Description)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_types_.Clear();
  restrictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rid_.ClearNonDefaultToEmptyNoArena();
  }
  direction_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rid_Description::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rid_Description*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string rid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_rid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .Rid_Direction direction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::Rid_Direction_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_direction(static_cast<::Rid_Direction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 payload_types = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_payload_types(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_payload_types();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // map<string, string> restrictions = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::Rid_Description_RestrictionsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->restrictions_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rid_Description::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Rid_Description)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Rid_Direction direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Rid_Direction_IsValid(value)) {
            set_direction(static_cast< ::Rid_Direction >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 payload_types = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_payload_types())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_payload_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> restrictions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          Rid_Description_RestrictionsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              Rid_Description_RestrictionsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&restrictions_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rid_Description)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rid_Description)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rid_Description::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rid_Description)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string rid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // optional .Rid_Direction direction = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // repeated int32 payload_types = 3;
  for (int i = 0, n = this->payload_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->payload_types(i), output);
  }

  // map<string, string> restrictions = 4;
  if (!this->restrictions().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->restrictions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->restrictions().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->restrictions().begin();
          it != this->restrictions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Rid_Description_RestrictionsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(restrictions_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Rid_Description_RestrictionsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->restrictions().begin();
          it != this->restrictions().end(); ++it) {
        entry.reset(restrictions_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Rid_Description)
}

size_t Rid_Description::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rid_Description)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 payload_types = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->payload_types_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->payload_types_size());
    total_size += data_size;
  }

  // map<string, string> restrictions = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->restrictions_size());
  {
    ::std::unique_ptr<Rid_Description_RestrictionsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->restrictions().begin();
        it != this->restrictions().end(); ++it) {
      entry.reset(restrictions_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string rid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rid());
    }

    // optional .Rid_Direction direction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rid_Description::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rid_Description*>(&from));
}

void Rid_Description::MergeFrom(const Rid_Description& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rid_Description)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payload_types_.MergeFrom(from.payload_types_);
  restrictions_.MergeFrom(from.restrictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
    }
    if (cached_has_bits & 0x00000002u) {
      direction_ = from.direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rid_Description::CopyFrom(const Rid_Description& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rid_Description)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rid_Description::IsInitialized() const {
  return true;
}

void Rid_Description::Swap(Rid_Description* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rid_Description::InternalSwap(Rid_Description* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_types_.InternalSwap(&other->payload_types_);
  restrictions_.Swap(&other->restrictions_);
  rid_.Swap(&other->rid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(direction_, other->direction_);
}

::std::string Rid_Description::GetTypeName() const {
  return "Rid_Description";
}


// ===================================================================

void Socket_Address::InitAsDefaultInstance() {
}
class Socket_Address::HasBitSetters {
 public:
  static void set_has_hostname(Socket_Address* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ip(Socket_Address* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_port(Socket_Address* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_scope_id(Socket_Address* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_literal(Socket_Address* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Socket_Address::kHostnameFieldNumber;
const int Socket_Address::kIpFieldNumber;
const int Socket_Address::kPortFieldNumber;
const int Socket_Address::kScopeIdFieldNumber;
const int Socket_Address::kLiteralFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Socket_Address::Socket_Address()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Socket_Address)
}
Socket_Address::Socket_Address(const Socket_Address& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ip()) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&literal_) -
    reinterpret_cast<char*>(&port_)) + sizeof(literal_));
  // @@protoc_insertion_point(copy_constructor:Socket_Address)
}

void Socket_Address::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Socket_Address_RtcSdpDefine_2eproto.base);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&literal_) -
      reinterpret_cast<char*>(&port_)) + sizeof(literal_));
}

Socket_Address::~Socket_Address() {
  // @@protoc_insertion_point(destructor:Socket_Address)
  SharedDtor();
}

void Socket_Address::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Socket_Address::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Socket_Address& Socket_Address::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Socket_Address_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Socket_Address::Clear() {
// @@protoc_insertion_point(message_clear_start:Socket_Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hostname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&literal_) -
        reinterpret_cast<char*>(&port_)) + sizeof(literal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Socket_Address::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Socket_Address*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string hostname = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_hostname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string ip = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 port = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 scope_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_scope_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool literal = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_literal(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Socket_Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Socket_Address)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 scope_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_scope_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scope_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool literal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_literal(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &literal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Socket_Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Socket_Address)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Socket_Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Socket_Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hostname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hostname(), output);
  }

  // optional string ip = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional int32 scope_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->scope_id(), output);
  }

  // optional bool literal = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->literal(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Socket_Address)
}

size_t Socket_Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Socket_Address)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hostname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional int32 scope_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scope_id());
    }

    // optional bool literal = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Socket_Address::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Socket_Address*>(&from));
}

void Socket_Address::MergeFrom(const Socket_Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Socket_Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000008u) {
      scope_id_ = from.scope_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      literal_ = from.literal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Socket_Address::CopyFrom(const Socket_Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Socket_Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Socket_Address::IsInitialized() const {
  return true;
}

void Socket_Address::Swap(Socket_Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Socket_Address::InternalSwap(Socket_Address* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(scope_id_, other->scope_id_);
  swap(literal_, other->literal_);
}

::std::string Socket_Address::GetTypeName() const {
  return "Socket_Address";
}


// ===================================================================

void Simulcast_Layer::InitAsDefaultInstance() {
}
class Simulcast_Layer::HasBitSetters {
 public:
  static void set_has_rid(Simulcast_Layer* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_paused(Simulcast_Layer* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Simulcast_Layer::kRidFieldNumber;
const int Simulcast_Layer::kIsPausedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Simulcast_Layer::Simulcast_Layer()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Simulcast_Layer)
}
Simulcast_Layer::Simulcast_Layer(const Simulcast_Layer& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rid()) {
    rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
  }
  is_paused_ = from.is_paused_;
  // @@protoc_insertion_point(copy_constructor:Simulcast_Layer)
}

void Simulcast_Layer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Simulcast_Layer_RtcSdpDefine_2eproto.base);
  rid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_paused_ = false;
}

Simulcast_Layer::~Simulcast_Layer() {
  // @@protoc_insertion_point(destructor:Simulcast_Layer)
  SharedDtor();
}

void Simulcast_Layer::SharedDtor() {
  rid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Simulcast_Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Simulcast_Layer& Simulcast_Layer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Simulcast_Layer_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Simulcast_Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:Simulcast_Layer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    rid_.ClearNonDefaultToEmptyNoArena();
  }
  is_paused_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Simulcast_Layer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Simulcast_Layer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string rid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_rid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool is_paused = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_paused(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Simulcast_Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Simulcast_Layer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_paused = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_paused(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Simulcast_Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Simulcast_Layer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Simulcast_Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Simulcast_Layer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string rid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rid(), output);
  }

  // optional bool is_paused = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_paused(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Simulcast_Layer)
}

size_t Simulcast_Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Simulcast_Layer)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string rid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rid());
    }

    // optional bool is_paused = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Simulcast_Layer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Simulcast_Layer*>(&from));
}

void Simulcast_Layer::MergeFrom(const Simulcast_Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Simulcast_Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      rid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rid_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_paused_ = from.is_paused_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Simulcast_Layer::CopyFrom(const Simulcast_Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Simulcast_Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Simulcast_Layer::IsInitialized() const {
  return true;
}

void Simulcast_Layer::Swap(Simulcast_Layer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Simulcast_Layer::InternalSwap(Simulcast_Layer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rid_.Swap(&other->rid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_paused_, other->is_paused_);
}

::std::string Simulcast_Layer::GetTypeName() const {
  return "Simulcast_Layer";
}


// ===================================================================

void Simulcast_Layer_List::InitAsDefaultInstance() {
}
class Simulcast_Layer_List::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Simulcast_Layer_List::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Simulcast_Layer_List::Simulcast_Layer_List()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Simulcast_Layer_List)
}
Simulcast_Layer_List::Simulcast_Layer_List(const Simulcast_Layer_List& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Simulcast_Layer_List)
}

void Simulcast_Layer_List::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Simulcast_Layer_List_RtcSdpDefine_2eproto.base);
}

Simulcast_Layer_List::~Simulcast_Layer_List() {
  // @@protoc_insertion_point(destructor:Simulcast_Layer_List)
  SharedDtor();
}

void Simulcast_Layer_List::SharedDtor() {
}

void Simulcast_Layer_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Simulcast_Layer_List& Simulcast_Layer_List::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Simulcast_Layer_List_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Simulcast_Layer_List::Clear() {
// @@protoc_insertion_point(message_clear_start:Simulcast_Layer_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Simulcast_Layer_List::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Simulcast_Layer_List*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .Simulcast_Layer list = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Simulcast_Layer::_InternalParse;
          object = msg->add_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Simulcast_Layer_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Simulcast_Layer_List)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Simulcast_Layer list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Simulcast_Layer_List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Simulcast_Layer_List)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Simulcast_Layer_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Simulcast_Layer_List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Simulcast_Layer list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->list(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Simulcast_Layer_List)
}

size_t Simulcast_Layer_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Simulcast_Layer_List)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Simulcast_Layer list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Simulcast_Layer_List::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Simulcast_Layer_List*>(&from));
}

void Simulcast_Layer_List::MergeFrom(const Simulcast_Layer_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Simulcast_Layer_List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void Simulcast_Layer_List::CopyFrom(const Simulcast_Layer_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Simulcast_Layer_List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Simulcast_Layer_List::IsInitialized() const {
  return true;
}

void Simulcast_Layer_List::Swap(Simulcast_Layer_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Simulcast_Layer_List::InternalSwap(Simulcast_Layer_List* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&list_)->InternalSwap(CastToBase(&other->list_));
}

::std::string Simulcast_Layer_List::GetTypeName() const {
  return "Simulcast_Layer_List";
}


// ===================================================================

void Simulcast_Description::InitAsDefaultInstance() {
}
class Simulcast_Description::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Simulcast_Description::kSendLayersFieldNumber;
const int Simulcast_Description::kReceiveLayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Simulcast_Description::Simulcast_Description()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Simulcast_Description)
}
Simulcast_Description::Simulcast_Description(const Simulcast_Description& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      send_layers_(from.send_layers_),
      receive_layers_(from.receive_layers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Simulcast_Description)
}

void Simulcast_Description::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Simulcast_Description_RtcSdpDefine_2eproto.base);
}

Simulcast_Description::~Simulcast_Description() {
  // @@protoc_insertion_point(destructor:Simulcast_Description)
  SharedDtor();
}

void Simulcast_Description::SharedDtor() {
}

void Simulcast_Description::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Simulcast_Description& Simulcast_Description::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Simulcast_Description_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Simulcast_Description::Clear() {
// @@protoc_insertion_point(message_clear_start:Simulcast_Description)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  send_layers_.Clear();
  receive_layers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Simulcast_Description::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Simulcast_Description*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .Simulcast_Layer_List send_layers = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Simulcast_Layer_List::_InternalParse;
          object = msg->add_send_layers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .Simulcast_Layer_List receive_layers = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Simulcast_Layer_List::_InternalParse;
          object = msg->add_receive_layers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Simulcast_Description::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Simulcast_Description)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Simulcast_Layer_List send_layers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_send_layers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Simulcast_Layer_List receive_layers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_receive_layers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Simulcast_Description)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Simulcast_Description)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Simulcast_Description::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Simulcast_Description)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Simulcast_Layer_List send_layers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->send_layers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->send_layers(static_cast<int>(i)),
      output);
  }

  // repeated .Simulcast_Layer_List receive_layers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->receive_layers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->receive_layers(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Simulcast_Description)
}

size_t Simulcast_Description::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Simulcast_Description)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Simulcast_Layer_List send_layers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->send_layers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->send_layers(static_cast<int>(i)));
    }
  }

  // repeated .Simulcast_Layer_List receive_layers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->receive_layers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->receive_layers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Simulcast_Description::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Simulcast_Description*>(&from));
}

void Simulcast_Description::MergeFrom(const Simulcast_Description& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Simulcast_Description)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  send_layers_.MergeFrom(from.send_layers_);
  receive_layers_.MergeFrom(from.receive_layers_);
}

void Simulcast_Description::CopyFrom(const Simulcast_Description& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Simulcast_Description)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Simulcast_Description::IsInitialized() const {
  return true;
}

void Simulcast_Description::Swap(Simulcast_Description* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Simulcast_Description::InternalSwap(Simulcast_Description* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&send_layers_)->InternalSwap(CastToBase(&other->send_layers_));
  CastToBase(&receive_layers_)->InternalSwap(CastToBase(&other->receive_layers_));
}

::std::string Simulcast_Description::GetTypeName() const {
  return "Simulcast_Description";
}


// ===================================================================

void RTC_Candidate::InitAsDefaultInstance() {
}
class RTC_Candidate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RTC_Candidate::RTC_Candidate()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTC_Candidate)
}
RTC_Candidate::RTC_Candidate(const RTC_Candidate& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RTC_Candidate)
}

void RTC_Candidate::SharedCtor() {
}

RTC_Candidate::~RTC_Candidate() {
  // @@protoc_insertion_point(destructor:RTC_Candidate)
  SharedDtor();
}

void RTC_Candidate::SharedDtor() {
}

void RTC_Candidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RTC_Candidate& RTC_Candidate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RTC_Candidate_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void RTC_Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:RTC_Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RTC_Candidate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RTC_Candidate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RTC_Candidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:RTC_Candidate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:RTC_Candidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTC_Candidate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RTC_Candidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTC_Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:RTC_Candidate)
}

size_t RTC_Candidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RTC_Candidate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTC_Candidate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RTC_Candidate*>(&from));
}

void RTC_Candidate::MergeFrom(const RTC_Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RTC_Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RTC_Candidate::CopyFrom(const RTC_Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RTC_Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTC_Candidate::IsInitialized() const {
  return true;
}

void RTC_Candidate::Swap(RTC_Candidate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RTC_Candidate::InternalSwap(RTC_Candidate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::std::string RTC_Candidate::GetTypeName() const {
  return "RTC_Candidate";
}


// ===================================================================

void Rtc_Ssrc_Info::InitAsDefaultInstance() {
}
class Rtc_Ssrc_Info::HasBitSetters {
 public:
  static void set_has_ssrc_id(Rtc_Ssrc_Info* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_cname(Rtc_Ssrc_Info* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stream_id(Rtc_Ssrc_Info* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_track_id(Rtc_Ssrc_Info* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_label(Rtc_Ssrc_Info* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_mslabel(Rtc_Ssrc_Info* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rtc_Ssrc_Info::kSsrcIdFieldNumber;
const int Rtc_Ssrc_Info::kCnameFieldNumber;
const int Rtc_Ssrc_Info::kStreamIdFieldNumber;
const int Rtc_Ssrc_Info::kTrackIdFieldNumber;
const int Rtc_Ssrc_Info::kLabelFieldNumber;
const int Rtc_Ssrc_Info::kMslabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rtc_Ssrc_Info::Rtc_Ssrc_Info()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rtc_Ssrc_Info)
}
Rtc_Ssrc_Info::Rtc_Ssrc_Info(const Rtc_Ssrc_Info& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cname()) {
    cname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cname_);
  }
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stream_id()) {
    stream_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id_);
  }
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track_id()) {
    track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  mslabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mslabel()) {
    mslabel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mslabel_);
  }
  ssrc_id_ = from.ssrc_id_;
  // @@protoc_insertion_point(copy_constructor:Rtc_Ssrc_Info)
}

void Rtc_Ssrc_Info::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rtc_Ssrc_Info_RtcSdpDefine_2eproto.base);
  cname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mslabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ssrc_id_ = 0u;
}

Rtc_Ssrc_Info::~Rtc_Ssrc_Info() {
  // @@protoc_insertion_point(destructor:Rtc_Ssrc_Info)
  SharedDtor();
}

void Rtc_Ssrc_Info::SharedDtor() {
  cname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mslabel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rtc_Ssrc_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rtc_Ssrc_Info& Rtc_Ssrc_Info::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rtc_Ssrc_Info_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Rtc_Ssrc_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:Rtc_Ssrc_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      cname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      stream_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      track_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      mslabel_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ssrc_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rtc_Ssrc_Info::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rtc_Ssrc_Info*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ssrc_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ssrc_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string cname = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string stream_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_stream_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string track_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_track_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string label = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_label();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string mslabel = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_mslabel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rtc_Ssrc_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Rtc_Ssrc_Info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ssrc_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ssrc_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssrc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stream_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string track_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mslabel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mslabel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rtc_Ssrc_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rtc_Ssrc_Info)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rtc_Ssrc_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rtc_Ssrc_Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ssrc_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ssrc_id(), output);
  }

  // optional string cname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cname(), output);
  }

  // optional string stream_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stream_id(), output);
  }

  // optional string track_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->track_id(), output);
  }

  // optional string label = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->label(), output);
  }

  // optional string mslabel = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mslabel(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Rtc_Ssrc_Info)
}

size_t Rtc_Ssrc_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rtc_Ssrc_Info)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string cname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cname());
    }

    // optional string stream_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_id());
    }

    // optional string track_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_id());
    }

    // optional string label = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string mslabel = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mslabel());
    }

    // optional uint32 ssrc_id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ssrc_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rtc_Ssrc_Info::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rtc_Ssrc_Info*>(&from));
}

void Rtc_Ssrc_Info::MergeFrom(const Rtc_Ssrc_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rtc_Ssrc_Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cname_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      stream_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      mslabel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mslabel_);
    }
    if (cached_has_bits & 0x00000020u) {
      ssrc_id_ = from.ssrc_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rtc_Ssrc_Info::CopyFrom(const Rtc_Ssrc_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rtc_Ssrc_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rtc_Ssrc_Info::IsInitialized() const {
  return true;
}

void Rtc_Ssrc_Info::Swap(Rtc_Ssrc_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rtc_Ssrc_Info::InternalSwap(Rtc_Ssrc_Info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cname_.Swap(&other->cname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stream_id_.Swap(&other->stream_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  track_id_.Swap(&other->track_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mslabel_.Swap(&other->mslabel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ssrc_id_, other->ssrc_id_);
}

::std::string Rtc_Ssrc_Info::GetTypeName() const {
  return "Rtc_Ssrc_Info";
}


// ===================================================================

void Rtc_Feedback_Param::InitAsDefaultInstance() {
}
class Rtc_Feedback_Param::HasBitSetters {
 public:
  static void set_has_id(Rtc_Feedback_Param* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_param(Rtc_Feedback_Param* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rtc_Feedback_Param::kIdFieldNumber;
const int Rtc_Feedback_Param::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rtc_Feedback_Param::Rtc_Feedback_Param()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rtc_Feedback_Param)
}
Rtc_Feedback_Param::Rtc_Feedback_Param(const Rtc_Feedback_Param& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param()) {
    param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_);
  }
  // @@protoc_insertion_point(copy_constructor:Rtc_Feedback_Param)
}

void Rtc_Feedback_Param::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rtc_Feedback_Param_RtcSdpDefine_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Rtc_Feedback_Param::~Rtc_Feedback_Param() {
  // @@protoc_insertion_point(destructor:Rtc_Feedback_Param)
  SharedDtor();
}

void Rtc_Feedback_Param::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rtc_Feedback_Param::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rtc_Feedback_Param& Rtc_Feedback_Param::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rtc_Feedback_Param_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Rtc_Feedback_Param::Clear() {
// @@protoc_insertion_point(message_clear_start:Rtc_Feedback_Param)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      param_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rtc_Feedback_Param::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rtc_Feedback_Param*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string param = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_param();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rtc_Feedback_Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Rtc_Feedback_Param)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rtc_Feedback_Param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rtc_Feedback_Param)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rtc_Feedback_Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rtc_Feedback_Param)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string param = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->param(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Rtc_Feedback_Param)
}

size_t Rtc_Feedback_Param::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rtc_Feedback_Param)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string param = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rtc_Feedback_Param::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rtc_Feedback_Param*>(&from));
}

void Rtc_Feedback_Param::MergeFrom(const Rtc_Feedback_Param& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rtc_Feedback_Param)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_);
    }
  }
}

void Rtc_Feedback_Param::CopyFrom(const Rtc_Feedback_Param& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rtc_Feedback_Param)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rtc_Feedback_Param::IsInitialized() const {
  return true;
}

void Rtc_Feedback_Param::Swap(Rtc_Feedback_Param* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rtc_Feedback_Param::InternalSwap(Rtc_Feedback_Param* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  param_.Swap(&other->param_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::std::string Rtc_Feedback_Param::GetTypeName() const {
  return "Rtc_Feedback_Param";
}


// ===================================================================

Rtc_Codec_ParamsEntry_DoNotUse::Rtc_Codec_ParamsEntry_DoNotUse() {}
Rtc_Codec_ParamsEntry_DoNotUse::Rtc_Codec_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Rtc_Codec_ParamsEntry_DoNotUse::MergeFrom(const Rtc_Codec_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rtc_Codec_ParamsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapFieldLite<
      Rtc_Codec_ParamsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Rtc_Codec::InitAsDefaultInstance() {
}
class Rtc_Codec::HasBitSetters {
 public:
  static void set_has_id(Rtc_Codec* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(Rtc_Codec* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_clockrate(Rtc_Codec* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rtc_Codec::kIdFieldNumber;
const int Rtc_Codec::kNameFieldNumber;
const int Rtc_Codec::kClockrateFieldNumber;
const int Rtc_Codec::kParamsFieldNumber;
const int Rtc_Codec::kFeedbackParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rtc_Codec::Rtc_Codec()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rtc_Codec)
}
Rtc_Codec::Rtc_Codec(const Rtc_Codec& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      feedback_params_(from.feedback_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&clockrate_) -
    reinterpret_cast<char*>(&id_)) + sizeof(clockrate_));
  // @@protoc_insertion_point(copy_constructor:Rtc_Codec)
}

void Rtc_Codec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rtc_Codec_RtcSdpDefine_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clockrate_) -
      reinterpret_cast<char*>(&id_)) + sizeof(clockrate_));
}

Rtc_Codec::~Rtc_Codec() {
  // @@protoc_insertion_point(destructor:Rtc_Codec)
  SharedDtor();
}

void Rtc_Codec::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rtc_Codec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rtc_Codec& Rtc_Codec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rtc_Codec_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Rtc_Codec::Clear() {
// @@protoc_insertion_point(message_clear_start:Rtc_Codec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  feedback_params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&clockrate_) -
        reinterpret_cast<char*>(&id_)) + sizeof(clockrate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rtc_Codec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rtc_Codec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 clockrate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_clockrate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, string> params = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::Rtc_Codec_ParamsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->params_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .Rtc_Feedback_Param feedback_params = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Rtc_Feedback_Param::_InternalParse;
          object = msg->add_feedback_params();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rtc_Codec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Rtc_Codec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 clockrate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_clockrate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clockrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> params = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          Rtc_Codec_ParamsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              Rtc_Codec_ParamsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&params_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Rtc_Feedback_Param feedback_params = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_feedback_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rtc_Codec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rtc_Codec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rtc_Codec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rtc_Codec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 clockrate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clockrate(), output);
  }

  // map<string, string> params = 4;
  if (!this->params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Rtc_Codec_ParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(params_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Rtc_Codec_ParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        entry.reset(params_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .Rtc_Feedback_Param feedback_params = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feedback_params_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->feedback_params(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Rtc_Codec)
}

size_t Rtc_Codec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rtc_Codec)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->params_size());
  {
    ::std::unique_ptr<Rtc_Codec_ParamsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->params().begin();
        it != this->params().end(); ++it) {
      entry.reset(params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .Rtc_Feedback_Param feedback_params = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->feedback_params_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->feedback_params(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 clockrate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clockrate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rtc_Codec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rtc_Codec*>(&from));
}

void Rtc_Codec::MergeFrom(const Rtc_Codec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rtc_Codec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  feedback_params_.MergeFrom(from.feedback_params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      clockrate_ = from.clockrate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rtc_Codec::CopyFrom(const Rtc_Codec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rtc_Codec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rtc_Codec::IsInitialized() const {
  return true;
}

void Rtc_Codec::Swap(Rtc_Codec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rtc_Codec::InternalSwap(Rtc_Codec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  params_.Swap(&other->params_);
  CastToBase(&feedback_params_)->InternalSwap(CastToBase(&other->feedback_params_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(clockrate_, other->clockrate_);
}

::std::string Rtc_Codec::GetTypeName() const {
  return "Rtc_Codec";
}


// ===================================================================

void Rtc_Audio_Codec::InitAsDefaultInstance() {
  ::_Rtc_Audio_Codec_default_instance_._instance.get_mutable()->codecs_ = const_cast< ::Rtc_Codec*>(
      ::Rtc_Codec::internal_default_instance());
}
class Rtc_Audio_Codec::HasBitSetters {
 public:
  static void set_has_bitrate(Rtc_Audio_Codec* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_channels(Rtc_Audio_Codec* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::Rtc_Codec& codecs(const Rtc_Audio_Codec* msg);
  static void set_has_codecs(Rtc_Audio_Codec* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::Rtc_Codec&
Rtc_Audio_Codec::HasBitSetters::codecs(const Rtc_Audio_Codec* msg) {
  return *msg->codecs_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rtc_Audio_Codec::kBitrateFieldNumber;
const int Rtc_Audio_Codec::kChannelsFieldNumber;
const int Rtc_Audio_Codec::kCodecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rtc_Audio_Codec::Rtc_Audio_Codec()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rtc_Audio_Codec)
}
Rtc_Audio_Codec::Rtc_Audio_Codec(const Rtc_Audio_Codec& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_codecs()) {
    codecs_ = new ::Rtc_Codec(*from.codecs_);
  } else {
    codecs_ = nullptr;
  }
  ::memcpy(&bitrate_, &from.bitrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&channels_) -
    reinterpret_cast<char*>(&bitrate_)) + sizeof(channels_));
  // @@protoc_insertion_point(copy_constructor:Rtc_Audio_Codec)
}

void Rtc_Audio_Codec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rtc_Audio_Codec_RtcSdpDefine_2eproto.base);
  ::memset(&codecs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channels_) -
      reinterpret_cast<char*>(&codecs_)) + sizeof(channels_));
}

Rtc_Audio_Codec::~Rtc_Audio_Codec() {
  // @@protoc_insertion_point(destructor:Rtc_Audio_Codec)
  SharedDtor();
}

void Rtc_Audio_Codec::SharedDtor() {
  if (this != internal_default_instance()) delete codecs_;
}

void Rtc_Audio_Codec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rtc_Audio_Codec& Rtc_Audio_Codec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rtc_Audio_Codec_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Rtc_Audio_Codec::Clear() {
// @@protoc_insertion_point(message_clear_start:Rtc_Audio_Codec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(codecs_ != nullptr);
    codecs_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&bitrate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channels_) -
        reinterpret_cast<char*>(&bitrate_)) + sizeof(channels_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rtc_Audio_Codec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rtc_Audio_Codec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 bitrate = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_bitrate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 channels = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_channels(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .Rtc_Codec codecs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Rtc_Codec::_InternalParse;
        object = msg->mutable_codecs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rtc_Audio_Codec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Rtc_Audio_Codec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bitrate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_bitrate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_channels(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Rtc_Codec codecs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_codecs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rtc_Audio_Codec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rtc_Audio_Codec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rtc_Audio_Codec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rtc_Audio_Codec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bitrate = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bitrate(), output);
  }

  // optional int32 channels = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  // optional .Rtc_Codec codecs = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, HasBitSetters::codecs(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Rtc_Audio_Codec)
}

size_t Rtc_Audio_Codec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rtc_Audio_Codec)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Rtc_Codec codecs = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *codecs_);
    }

    // optional int32 bitrate = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitrate());
    }

    // optional int32 channels = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rtc_Audio_Codec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rtc_Audio_Codec*>(&from));
}

void Rtc_Audio_Codec::MergeFrom(const Rtc_Audio_Codec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rtc_Audio_Codec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_codecs()->::Rtc_Codec::MergeFrom(from.codecs());
    }
    if (cached_has_bits & 0x00000002u) {
      bitrate_ = from.bitrate_;
    }
    if (cached_has_bits & 0x00000004u) {
      channels_ = from.channels_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rtc_Audio_Codec::CopyFrom(const Rtc_Audio_Codec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rtc_Audio_Codec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rtc_Audio_Codec::IsInitialized() const {
  return true;
}

void Rtc_Audio_Codec::Swap(Rtc_Audio_Codec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rtc_Audio_Codec::InternalSwap(Rtc_Audio_Codec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(codecs_, other->codecs_);
  swap(bitrate_, other->bitrate_);
  swap(channels_, other->channels_);
}

::std::string Rtc_Audio_Codec::GetTypeName() const {
  return "Rtc_Audio_Codec";
}


// ===================================================================

void Rtc_Video_Codec::InitAsDefaultInstance() {
  ::_Rtc_Video_Codec_default_instance_._instance.get_mutable()->codecs_ = const_cast< ::Rtc_Codec*>(
      ::Rtc_Codec::internal_default_instance());
}
class Rtc_Video_Codec::HasBitSetters {
 public:
  static const ::Rtc_Codec& codecs(const Rtc_Video_Codec* msg);
  static void set_has_codecs(Rtc_Video_Codec* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::Rtc_Codec&
Rtc_Video_Codec::HasBitSetters::codecs(const Rtc_Video_Codec* msg) {
  return *msg->codecs_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rtc_Video_Codec::kCodecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rtc_Video_Codec::Rtc_Video_Codec()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rtc_Video_Codec)
}
Rtc_Video_Codec::Rtc_Video_Codec(const Rtc_Video_Codec& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_codecs()) {
    codecs_ = new ::Rtc_Codec(*from.codecs_);
  } else {
    codecs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Rtc_Video_Codec)
}

void Rtc_Video_Codec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rtc_Video_Codec_RtcSdpDefine_2eproto.base);
  codecs_ = nullptr;
}

Rtc_Video_Codec::~Rtc_Video_Codec() {
  // @@protoc_insertion_point(destructor:Rtc_Video_Codec)
  SharedDtor();
}

void Rtc_Video_Codec::SharedDtor() {
  if (this != internal_default_instance()) delete codecs_;
}

void Rtc_Video_Codec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rtc_Video_Codec& Rtc_Video_Codec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rtc_Video_Codec_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Rtc_Video_Codec::Clear() {
// @@protoc_insertion_point(message_clear_start:Rtc_Video_Codec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(codecs_ != nullptr);
    codecs_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rtc_Video_Codec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rtc_Video_Codec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .Rtc_Codec codecs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Rtc_Codec::_InternalParse;
        object = msg->mutable_codecs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rtc_Video_Codec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Rtc_Video_Codec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Rtc_Codec codecs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_codecs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rtc_Video_Codec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rtc_Video_Codec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rtc_Video_Codec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rtc_Video_Codec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Rtc_Codec codecs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::codecs(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Rtc_Video_Codec)
}

size_t Rtc_Video_Codec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rtc_Video_Codec)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Rtc_Codec codecs = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *codecs_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rtc_Video_Codec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rtc_Video_Codec*>(&from));
}

void Rtc_Video_Codec::MergeFrom(const Rtc_Video_Codec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rtc_Video_Codec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_codecs()) {
    mutable_codecs()->::Rtc_Codec::MergeFrom(from.codecs());
  }
}

void Rtc_Video_Codec::CopyFrom(const Rtc_Video_Codec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rtc_Video_Codec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rtc_Video_Codec::IsInitialized() const {
  return true;
}

void Rtc_Video_Codec::Swap(Rtc_Video_Codec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rtc_Video_Codec::InternalSwap(Rtc_Video_Codec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(codecs_, other->codecs_);
}

::std::string Rtc_Video_Codec::GetTypeName() const {
  return "Rtc_Video_Codec";
}


// ===================================================================

void Rtc_Data_Codec::InitAsDefaultInstance() {
  ::_Rtc_Data_Codec_default_instance_._instance.get_mutable()->codecs_ = const_cast< ::Rtc_Codec*>(
      ::Rtc_Codec::internal_default_instance());
}
class Rtc_Data_Codec::HasBitSetters {
 public:
  static const ::Rtc_Codec& codecs(const Rtc_Data_Codec* msg);
  static void set_has_codecs(Rtc_Data_Codec* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::Rtc_Codec&
Rtc_Data_Codec::HasBitSetters::codecs(const Rtc_Data_Codec* msg) {
  return *msg->codecs_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rtc_Data_Codec::kCodecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rtc_Data_Codec::Rtc_Data_Codec()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rtc_Data_Codec)
}
Rtc_Data_Codec::Rtc_Data_Codec(const Rtc_Data_Codec& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_codecs()) {
    codecs_ = new ::Rtc_Codec(*from.codecs_);
  } else {
    codecs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Rtc_Data_Codec)
}

void Rtc_Data_Codec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rtc_Data_Codec_RtcSdpDefine_2eproto.base);
  codecs_ = nullptr;
}

Rtc_Data_Codec::~Rtc_Data_Codec() {
  // @@protoc_insertion_point(destructor:Rtc_Data_Codec)
  SharedDtor();
}

void Rtc_Data_Codec::SharedDtor() {
  if (this != internal_default_instance()) delete codecs_;
}

void Rtc_Data_Codec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rtc_Data_Codec& Rtc_Data_Codec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rtc_Data_Codec_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Rtc_Data_Codec::Clear() {
// @@protoc_insertion_point(message_clear_start:Rtc_Data_Codec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(codecs_ != nullptr);
    codecs_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rtc_Data_Codec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rtc_Data_Codec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .Rtc_Codec codecs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Rtc_Codec::_InternalParse;
        object = msg->mutable_codecs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rtc_Data_Codec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Rtc_Data_Codec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Rtc_Codec codecs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_codecs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rtc_Data_Codec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rtc_Data_Codec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rtc_Data_Codec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rtc_Data_Codec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Rtc_Codec codecs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, HasBitSetters::codecs(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Rtc_Data_Codec)
}

size_t Rtc_Data_Codec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rtc_Data_Codec)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Rtc_Codec codecs = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *codecs_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rtc_Data_Codec::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rtc_Data_Codec*>(&from));
}

void Rtc_Data_Codec::MergeFrom(const Rtc_Data_Codec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rtc_Data_Codec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_codecs()) {
    mutable_codecs()->::Rtc_Codec::MergeFrom(from.codecs());
  }
}

void Rtc_Data_Codec::CopyFrom(const Rtc_Data_Codec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rtc_Data_Codec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rtc_Data_Codec::IsInitialized() const {
  return true;
}

void Rtc_Data_Codec::Swap(Rtc_Data_Codec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rtc_Data_Codec::InternalSwap(Rtc_Data_Codec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(codecs_, other->codecs_);
}

::std::string Rtc_Data_Codec::GetTypeName() const {
  return "Rtc_Data_Codec";
}


// ===================================================================

void Rtc_Candidate::InitAsDefaultInstance() {
  ::_Rtc_Candidate_default_instance_._instance.get_mutable()->address_ = const_cast< ::Socket_Address*>(
      ::Socket_Address::internal_default_instance());
}
class Rtc_Candidate::HasBitSetters {
 public:
  static void set_has_id(Rtc_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_component(Rtc_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_protocol(Rtc_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_relay_protocol(Rtc_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::Socket_Address& address(const Rtc_Candidate* msg);
  static void set_has_address(Rtc_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_priority(Rtc_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_username(Rtc_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_password(Rtc_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_type(Rtc_Candidate* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::Socket_Address&
Rtc_Candidate::HasBitSetters::address(const Rtc_Candidate* msg) {
  return *msg->address_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rtc_Candidate::kIdFieldNumber;
const int Rtc_Candidate::kComponentFieldNumber;
const int Rtc_Candidate::kProtocolFieldNumber;
const int Rtc_Candidate::kRelayProtocolFieldNumber;
const int Rtc_Candidate::kAddressFieldNumber;
const int Rtc_Candidate::kPriorityFieldNumber;
const int Rtc_Candidate::kUsernameFieldNumber;
const int Rtc_Candidate::kPasswordFieldNumber;
const int Rtc_Candidate::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rtc_Candidate::Rtc_Candidate()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rtc_Candidate)
}
Rtc_Candidate::Rtc_Candidate(const Rtc_Candidate& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocol()) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  relay_protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_relay_protocol()) {
    relay_protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relay_protocol_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_address()) {
    address_ = new ::Socket_Address(*from.address_);
  } else {
    address_ = nullptr;
  }
  ::memcpy(&component_, &from.component_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&component_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:Rtc_Candidate)
}

void Rtc_Candidate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rtc_Candidate_RtcSdpDefine_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relay_protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&address_)) + sizeof(priority_));
}

Rtc_Candidate::~Rtc_Candidate() {
  // @@protoc_insertion_point(destructor:Rtc_Candidate)
  SharedDtor();
}

void Rtc_Candidate::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relay_protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete address_;
}

void Rtc_Candidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rtc_Candidate& Rtc_Candidate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rtc_Candidate_RtcSdpDefine_2eproto.base);
  return *internal_default_instance();
}


void Rtc_Candidate::Clear() {
// @@protoc_insertion_point(message_clear_start:Rtc_Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      protocol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      relay_protocol_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(address_ != nullptr);
      address_->Clear();
    }
  }
  component_ = 0;
  priority_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rtc_Candidate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rtc_Candidate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 component = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_component(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string protocol = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_protocol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string relay_protocol = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_relay_protocol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .Socket_Address address = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Socket_Address::_InternalParse;
        object = msg->mutable_address();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 priority = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_priority(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string username = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string password = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_password();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string type = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rtc_Candidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:Rtc_Candidate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 component = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_component(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &component_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string protocol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string relay_protocol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relay_protocol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .Socket_Address address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 priority = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_priority(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rtc_Candidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rtc_Candidate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rtc_Candidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rtc_Candidate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional int32 component = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->component(), output);
  }

  // optional string protocol = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->protocol(), output);
  }

  // optional string relay_protocol = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->relay_protocol(), output);
  }

  // optional .Socket_Address address = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, HasBitSetters::address(this), output);
  }

  // optional uint32 priority = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->priority(), output);
  }

  // optional string username = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->username(), output);
  }

  // optional string password = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->password(), output);
  }

  // optional string type = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Rtc_Candidate)
}

size_t Rtc_Candidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rtc_Candidate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string protocol = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

    // optional string relay_protocol = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relay_protocol());
    }

    // optional string username = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string type = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .Socket_Address address = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *address_);
    }

    // optional int32 component = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->component());
    }

  }
  // optional uint32 priority = 6;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rtc_Candidate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rtc_Candidate*>(&from));
}

void Rtc_Candidate::MergeFrom(const Rtc_Candidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rtc_Candidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      relay_protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relay_protocol_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_address()->::Socket_Address::MergeFrom(from.address());
    }
    if (cached_has_bits & 0x00000080u) {
      component_ = from.component_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_priority(from.priority());
  }
}

void Rtc_Candidate::CopyFrom(const Rtc_Candidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rtc_Candidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rtc_Candidate::IsInitialized() const {
  return true;
}

void Rtc_Candidate::Swap(Rtc_Candidate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rtc_Candidate::InternalSwap(Rtc_Candidate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocol_.Swap(&other->protocol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  relay_protocol_.Swap(&other->relay_protocol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(address_, other->address_);
  swap(component_, other->component_);
  swap(priority_, other->priority_);
}

::std::string Rtc_Candidate::GetTypeName() const {
  return "Rtc_Candidate";
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Ssl_Fignerpint* Arena::CreateMaybeMessage< ::Ssl_Fignerpint >(Arena* arena) {
  return Arena::CreateInternal< ::Ssl_Fignerpint >(arena);
}
template<> PROTOBUF_NOINLINE ::Crypto_Params* Arena::CreateMaybeMessage< ::Crypto_Params >(Arena* arena) {
  return Arena::CreateInternal< ::Crypto_Params >(arena);
}
template<> PROTOBUF_NOINLINE ::Rtp_Extension* Arena::CreateMaybeMessage< ::Rtp_Extension >(Arena* arena) {
  return Arena::CreateInternal< ::Rtp_Extension >(arena);
}
template<> PROTOBUF_NOINLINE ::Ssrc_Group* Arena::CreateMaybeMessage< ::Ssrc_Group >(Arena* arena) {
  return Arena::CreateInternal< ::Ssrc_Group >(arena);
}
template<> PROTOBUF_NOINLINE ::Rid_Description_RestrictionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::Rid_Description_RestrictionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Rid_Description_RestrictionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Rid_Description* Arena::CreateMaybeMessage< ::Rid_Description >(Arena* arena) {
  return Arena::CreateInternal< ::Rid_Description >(arena);
}
template<> PROTOBUF_NOINLINE ::Socket_Address* Arena::CreateMaybeMessage< ::Socket_Address >(Arena* arena) {
  return Arena::CreateInternal< ::Socket_Address >(arena);
}
template<> PROTOBUF_NOINLINE ::Simulcast_Layer* Arena::CreateMaybeMessage< ::Simulcast_Layer >(Arena* arena) {
  return Arena::CreateInternal< ::Simulcast_Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::Simulcast_Layer_List* Arena::CreateMaybeMessage< ::Simulcast_Layer_List >(Arena* arena) {
  return Arena::CreateInternal< ::Simulcast_Layer_List >(arena);
}
template<> PROTOBUF_NOINLINE ::Simulcast_Description* Arena::CreateMaybeMessage< ::Simulcast_Description >(Arena* arena) {
  return Arena::CreateInternal< ::Simulcast_Description >(arena);
}
template<> PROTOBUF_NOINLINE ::RTC_Candidate* Arena::CreateMaybeMessage< ::RTC_Candidate >(Arena* arena) {
  return Arena::CreateInternal< ::RTC_Candidate >(arena);
}
template<> PROTOBUF_NOINLINE ::Rtc_Ssrc_Info* Arena::CreateMaybeMessage< ::Rtc_Ssrc_Info >(Arena* arena) {
  return Arena::CreateInternal< ::Rtc_Ssrc_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::Rtc_Feedback_Param* Arena::CreateMaybeMessage< ::Rtc_Feedback_Param >(Arena* arena) {
  return Arena::CreateInternal< ::Rtc_Feedback_Param >(arena);
}
template<> PROTOBUF_NOINLINE ::Rtc_Codec_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::Rtc_Codec_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::Rtc_Codec_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::Rtc_Codec* Arena::CreateMaybeMessage< ::Rtc_Codec >(Arena* arena) {
  return Arena::CreateInternal< ::Rtc_Codec >(arena);
}
template<> PROTOBUF_NOINLINE ::Rtc_Audio_Codec* Arena::CreateMaybeMessage< ::Rtc_Audio_Codec >(Arena* arena) {
  return Arena::CreateInternal< ::Rtc_Audio_Codec >(arena);
}
template<> PROTOBUF_NOINLINE ::Rtc_Video_Codec* Arena::CreateMaybeMessage< ::Rtc_Video_Codec >(Arena* arena) {
  return Arena::CreateInternal< ::Rtc_Video_Codec >(arena);
}
template<> PROTOBUF_NOINLINE ::Rtc_Data_Codec* Arena::CreateMaybeMessage< ::Rtc_Data_Codec >(Arena* arena) {
  return Arena::CreateInternal< ::Rtc_Data_Codec >(arena);
}
template<> PROTOBUF_NOINLINE ::Rtc_Candidate* Arena::CreateMaybeMessage< ::Rtc_Candidate >(Arena* arena) {
  return Arena::CreateInternal< ::Rtc_Candidate >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
